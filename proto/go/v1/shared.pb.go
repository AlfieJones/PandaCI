// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: proto/v1/shared.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WorkflowLanguage int32

const (
	WorkflowLanguage_WORKFLOW_LANGUAGE_UNSPECIFIED WorkflowLanguage = 0
	WorkflowLanguage_WORKFLOW_LANGUAGE_DENO        WorkflowLanguage = 1
)

// Enum value maps for WorkflowLanguage.
var (
	WorkflowLanguage_name = map[int32]string{
		0: "WORKFLOW_LANGUAGE_UNSPECIFIED",
		1: "WORKFLOW_LANGUAGE_DENO",
	}
	WorkflowLanguage_value = map[string]int32{
		"WORKFLOW_LANGUAGE_UNSPECIFIED": 0,
		"WORKFLOW_LANGUAGE_DENO":        1,
	}
)

func (x WorkflowLanguage) Enum() *WorkflowLanguage {
	p := new(WorkflowLanguage)
	*p = x
	return p
}

func (x WorkflowLanguage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowLanguage) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_v1_shared_proto_enumTypes[0].Descriptor()
}

func (WorkflowLanguage) Type() protoreflect.EnumType {
	return &file_proto_v1_shared_proto_enumTypes[0]
}

func (x WorkflowLanguage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowLanguage.Descriptor instead.
func (WorkflowLanguage) EnumDescriptor() ([]byte, []int) {
	return file_proto_v1_shared_proto_rawDescGZIP(), []int{0}
}

type Trigger int32

const (
	Trigger_TRIGGER_UNSPECIFIED Trigger = 0
	Trigger_TRIGGER_MANUAL      Trigger = 1
	Trigger_TRIGGER_PUSH        Trigger = 2
	Trigger_TRIGGER_PR_OPENED   Trigger = 3
	Trigger_TRIGGER_PR_SYNC     Trigger = 4
	Trigger_TRIGGER_PR_CLOSED   Trigger = 5
)

// Enum value maps for Trigger.
var (
	Trigger_name = map[int32]string{
		0: "TRIGGER_UNSPECIFIED",
		1: "TRIGGER_MANUAL",
		2: "TRIGGER_PUSH",
		3: "TRIGGER_PR_OPENED",
		4: "TRIGGER_PR_SYNC",
		5: "TRIGGER_PR_CLOSED",
	}
	Trigger_value = map[string]int32{
		"TRIGGER_UNSPECIFIED": 0,
		"TRIGGER_MANUAL":      1,
		"TRIGGER_PUSH":        2,
		"TRIGGER_PR_OPENED":   3,
		"TRIGGER_PR_SYNC":     4,
		"TRIGGER_PR_CLOSED":   5,
	}
)

func (x Trigger) Enum() *Trigger {
	p := new(Trigger)
	*p = x
	return p
}

func (x Trigger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trigger) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_v1_shared_proto_enumTypes[1].Descriptor()
}

func (Trigger) Type() protoreflect.EnumType {
	return &file_proto_v1_shared_proto_enumTypes[1]
}

func (x Trigger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trigger.Descriptor instead.
func (Trigger) EnumDescriptor() ([]byte, []int) {
	return file_proto_v1_shared_proto_rawDescGZIP(), []int{1}
}

type Conclusion int32

const (
	Conclusion_CONCLUSION_UNSPECIFIED Conclusion = 0
	Conclusion_CONCLUSION_SUCCESS     Conclusion = 1
	Conclusion_CONCLUSION_FAILURE     Conclusion = 2
	Conclusion_CONCLUSION_SKIPPED     Conclusion = 3
)

// Enum value maps for Conclusion.
var (
	Conclusion_name = map[int32]string{
		0: "CONCLUSION_UNSPECIFIED",
		1: "CONCLUSION_SUCCESS",
		2: "CONCLUSION_FAILURE",
		3: "CONCLUSION_SKIPPED",
	}
	Conclusion_value = map[string]int32{
		"CONCLUSION_UNSPECIFIED": 0,
		"CONCLUSION_SUCCESS":     1,
		"CONCLUSION_FAILURE":     2,
		"CONCLUSION_SKIPPED":     3,
	}
)

func (x Conclusion) Enum() *Conclusion {
	p := new(Conclusion)
	*p = x
	return p
}

func (x Conclusion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Conclusion) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_v1_shared_proto_enumTypes[2].Descriptor()
}

func (Conclusion) Type() protoreflect.EnumType {
	return &file_proto_v1_shared_proto_enumTypes[2]
}

func (x Conclusion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Conclusion.Descriptor instead.
func (Conclusion) EnumDescriptor() ([]byte, []int) {
	return file_proto_v1_shared_proto_rawDescGZIP(), []int{2}
}

type LogMessage_ExecData_Type int32

const (
	LogMessage_ExecData_TYPE_UNSPECIFIED LogMessage_ExecData_Type = 0
	LogMessage_ExecData_TYPE_STDOUT      LogMessage_ExecData_Type = 1
	LogMessage_ExecData_TYPE_STDERR      LogMessage_ExecData_Type = 2
)

// Enum value maps for LogMessage_ExecData_Type.
var (
	LogMessage_ExecData_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_STDOUT",
		2: "TYPE_STDERR",
	}
	LogMessage_ExecData_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_STDOUT":      1,
		"TYPE_STDERR":      2,
	}
)

func (x LogMessage_ExecData_Type) Enum() *LogMessage_ExecData_Type {
	p := new(LogMessage_ExecData_Type)
	*p = x
	return p
}

func (x LogMessage_ExecData_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogMessage_ExecData_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_v1_shared_proto_enumTypes[3].Descriptor()
}

func (LogMessage_ExecData_Type) Type() protoreflect.EnumType {
	return &file_proto_v1_shared_proto_enumTypes[3]
}

func (x LogMessage_ExecData_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogMessage_ExecData_Type.Descriptor instead.
func (LogMessage_ExecData_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_v1_shared_proto_rawDescGZIP(), []int{9, 0, 0}
}

type StartTaskData_Docker_DockerVolume_Type int32

const (
	StartTaskData_Docker_DockerVolume_TYPE_UNSPECIFIED StartTaskData_Docker_DockerVolume_Type = 0
	StartTaskData_Docker_DockerVolume_TYPE_BIND        StartTaskData_Docker_DockerVolume_Type = 1
	StartTaskData_Docker_DockerVolume_TYPE_VOLUME      StartTaskData_Docker_DockerVolume_Type = 2
)

// Enum value maps for StartTaskData_Docker_DockerVolume_Type.
var (
	StartTaskData_Docker_DockerVolume_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_BIND",
		2: "TYPE_VOLUME",
	}
	StartTaskData_Docker_DockerVolume_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_BIND":        1,
		"TYPE_VOLUME":      2,
	}
)

func (x StartTaskData_Docker_DockerVolume_Type) Enum() *StartTaskData_Docker_DockerVolume_Type {
	p := new(StartTaskData_Docker_DockerVolume_Type)
	*p = x
	return p
}

func (x StartTaskData_Docker_DockerVolume_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StartTaskData_Docker_DockerVolume_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_v1_shared_proto_enumTypes[4].Descriptor()
}

func (StartTaskData_Docker_DockerVolume_Type) Type() protoreflect.EnumType {
	return &file_proto_v1_shared_proto_enumTypes[4]
}

func (x StartTaskData_Docker_DockerVolume_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StartTaskData_Docker_DockerVolume_Type.Descriptor instead.
func (StartTaskData_Docker_DockerVolume_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_v1_shared_proto_rawDescGZIP(), []int{10, 0, 0, 0}
}

type WorkflowAlert_Type int32

const (
	WorkflowAlert_TYPE_UNSPECIFIED WorkflowAlert_Type = 0
	WorkflowAlert_TYPE_ERROR       WorkflowAlert_Type = 1
	WorkflowAlert_TYPE_WARNING     WorkflowAlert_Type = 2
	WorkflowAlert_TYPE_INFO        WorkflowAlert_Type = 3
)

// Enum value maps for WorkflowAlert_Type.
var (
	WorkflowAlert_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_ERROR",
		2: "TYPE_WARNING",
		3: "TYPE_INFO",
	}
	WorkflowAlert_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_ERROR":       1,
		"TYPE_WARNING":     2,
		"TYPE_INFO":        3,
	}
)

func (x WorkflowAlert_Type) Enum() *WorkflowAlert_Type {
	p := new(WorkflowAlert_Type)
	*p = x
	return p
}

func (x WorkflowAlert_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowAlert_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_v1_shared_proto_enumTypes[5].Descriptor()
}

func (WorkflowAlert_Type) Type() protoreflect.EnumType {
	return &file_proto_v1_shared_proto_enumTypes[5]
}

func (x WorkflowAlert_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowAlert_Type.Descriptor instead.
func (WorkflowAlert_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_v1_shared_proto_rawDescGZIP(), []int{11, 0}
}

type DockerRunMeta struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DockerRunMeta) Reset() {
	*x = DockerRunMeta{}
	mi := &file_proto_v1_shared_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DockerRunMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerRunMeta) ProtoMessage() {}

func (x *DockerRunMeta) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_shared_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerRunMeta.ProtoReflect.Descriptor instead.
func (*DockerRunMeta) Descriptor() ([]byte, []int) {
	return file_proto_v1_shared_proto_rawDescGZIP(), []int{0}
}

func (x *DockerRunMeta) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type FlyRunMeta struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	AppName               string                 `protobuf:"bytes,1,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	CreatedAt             *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ParentRunnerMachineId string                 `protobuf:"bytes,3,opt,name=parent_runner_machine_id,json=parentRunnerMachineId,proto3" json:"parent_runner_machine_id,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *FlyRunMeta) Reset() {
	*x = FlyRunMeta{}
	mi := &file_proto_v1_shared_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlyRunMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlyRunMeta) ProtoMessage() {}

func (x *FlyRunMeta) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_shared_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlyRunMeta.ProtoReflect.Descriptor instead.
func (*FlyRunMeta) Descriptor() ([]byte, []int) {
	return file_proto_v1_shared_proto_rawDescGZIP(), []int{1}
}

func (x *FlyRunMeta) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *FlyRunMeta) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *FlyRunMeta) GetParentRunnerMachineId() string {
	if x != nil {
		return x.ParentRunnerMachineId
	}
	return ""
}

type WorkflowMeta struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	WorkflowJwt string                 `protobuf:"bytes,1,opt,name=workflow_jwt,json=workflowJwt,proto3" json:"workflow_jwt,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Address     string                 `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	StartedAt   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	TimeoutAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timeout_at,json=timeoutAt,proto3" json:"timeout_at,omitempty"`
	Runnner     string                 `protobuf:"bytes,6,opt,name=runnner,proto3" json:"runnner,omitempty"`
	Repo        *GitRepo               `protobuf:"bytes,7,opt,name=repo,proto3" json:"repo,omitempty"`
	PrNumber    *int32                 `protobuf:"varint,8,opt,name=pr_number,json=prNumber,proto3,oneof" json:"pr_number,omitempty"`
	Trigger     Trigger                `protobuf:"varint,9,opt,name=trigger,proto3,enum=proto.v1.Trigger" json:"trigger,omitempty"`
	// Types that are valid to be assigned to RunnerMeta:
	//
	//	*WorkflowMeta_FlyMeta
	//	*WorkflowMeta_DockerMeta
	RunnerMeta    isWorkflowMeta_RunnerMeta `protobuf_oneof:"runner_meta"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowMeta) Reset() {
	*x = WorkflowMeta{}
	mi := &file_proto_v1_shared_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowMeta) ProtoMessage() {}

func (x *WorkflowMeta) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_shared_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowMeta.ProtoReflect.Descriptor instead.
func (*WorkflowMeta) Descriptor() ([]byte, []int) {
	return file_proto_v1_shared_proto_rawDescGZIP(), []int{2}
}

func (x *WorkflowMeta) GetWorkflowJwt() string {
	if x != nil {
		return x.WorkflowJwt
	}
	return ""
}

func (x *WorkflowMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowMeta) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *WorkflowMeta) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *WorkflowMeta) GetTimeoutAt() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeoutAt
	}
	return nil
}

func (x *WorkflowMeta) GetRunnner() string {
	if x != nil {
		return x.Runnner
	}
	return ""
}

func (x *WorkflowMeta) GetRepo() *GitRepo {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *WorkflowMeta) GetPrNumber() int32 {
	if x != nil && x.PrNumber != nil {
		return *x.PrNumber
	}
	return 0
}

func (x *WorkflowMeta) GetTrigger() Trigger {
	if x != nil {
		return x.Trigger
	}
	return Trigger_TRIGGER_UNSPECIFIED
}

func (x *WorkflowMeta) GetRunnerMeta() isWorkflowMeta_RunnerMeta {
	if x != nil {
		return x.RunnerMeta
	}
	return nil
}

func (x *WorkflowMeta) GetFlyMeta() *FlyRunMeta {
	if x != nil {
		if x, ok := x.RunnerMeta.(*WorkflowMeta_FlyMeta); ok {
			return x.FlyMeta
		}
	}
	return nil
}

func (x *WorkflowMeta) GetDockerMeta() *DockerRunMeta {
	if x != nil {
		if x, ok := x.RunnerMeta.(*WorkflowMeta_DockerMeta); ok {
			return x.DockerMeta
		}
	}
	return nil
}

type isWorkflowMeta_RunnerMeta interface {
	isWorkflowMeta_RunnerMeta()
}

type WorkflowMeta_FlyMeta struct {
	FlyMeta *FlyRunMeta `protobuf:"bytes,10,opt,name=fly_meta,json=flyMeta,proto3,oneof"`
}

type WorkflowMeta_DockerMeta struct {
	DockerMeta *DockerRunMeta `protobuf:"bytes,11,opt,name=docker_meta,json=dockerMeta,proto3,oneof"`
}

func (*WorkflowMeta_FlyMeta) isWorkflowMeta_RunnerMeta() {}

func (*WorkflowMeta_DockerMeta) isWorkflowMeta_RunnerMeta() {}

type JobMeta struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Id      string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Address string                 `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Runner  string                 `protobuf:"bytes,4,opt,name=runner,proto3" json:"runner,omitempty"`
	// Types that are valid to be assigned to RunnerMeta:
	//
	//	*JobMeta_FlyMeta
	//	*JobMeta_DockerMeta
	RunnerMeta    isJobMeta_RunnerMeta `protobuf_oneof:"runner_meta"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobMeta) Reset() {
	*x = JobMeta{}
	mi := &file_proto_v1_shared_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobMeta) ProtoMessage() {}

func (x *JobMeta) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_shared_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobMeta.ProtoReflect.Descriptor instead.
func (*JobMeta) Descriptor() ([]byte, []int) {
	return file_proto_v1_shared_proto_rawDescGZIP(), []int{3}
}

func (x *JobMeta) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JobMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JobMeta) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *JobMeta) GetRunner() string {
	if x != nil {
		return x.Runner
	}
	return ""
}

func (x *JobMeta) GetRunnerMeta() isJobMeta_RunnerMeta {
	if x != nil {
		return x.RunnerMeta
	}
	return nil
}

func (x *JobMeta) GetFlyMeta() *FlyRunMeta {
	if x != nil {
		if x, ok := x.RunnerMeta.(*JobMeta_FlyMeta); ok {
			return x.FlyMeta
		}
	}
	return nil
}

func (x *JobMeta) GetDockerMeta() *DockerRunMeta {
	if x != nil {
		if x, ok := x.RunnerMeta.(*JobMeta_DockerMeta); ok {
			return x.DockerMeta
		}
	}
	return nil
}

type isJobMeta_RunnerMeta interface {
	isJobMeta_RunnerMeta()
}

type JobMeta_FlyMeta struct {
	FlyMeta *FlyRunMeta `protobuf:"bytes,5,opt,name=fly_meta,json=flyMeta,proto3,oneof"`
}

type JobMeta_DockerMeta struct {
	DockerMeta *DockerRunMeta `protobuf:"bytes,6,opt,name=docker_meta,json=dockerMeta,proto3,oneof"`
}

func (*JobMeta_FlyMeta) isJobMeta_RunnerMeta() {}

func (*JobMeta_DockerMeta) isJobMeta_RunnerMeta() {}

type TaskMeta struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to SpecificMeta:
	//
	//	*TaskMeta_DockerMeta
	//	*TaskMeta_NativeMeta
	SpecificMeta  isTaskMeta_SpecificMeta `protobuf_oneof:"specific_meta"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskMeta) Reset() {
	*x = TaskMeta{}
	mi := &file_proto_v1_shared_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskMeta) ProtoMessage() {}

func (x *TaskMeta) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_shared_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskMeta.ProtoReflect.Descriptor instead.
func (*TaskMeta) Descriptor() ([]byte, []int) {
	return file_proto_v1_shared_proto_rawDescGZIP(), []int{4}
}

func (x *TaskMeta) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskMeta) GetSpecificMeta() isTaskMeta_SpecificMeta {
	if x != nil {
		return x.SpecificMeta
	}
	return nil
}

func (x *TaskMeta) GetDockerMeta() *TaskMeta_Docker {
	if x != nil {
		if x, ok := x.SpecificMeta.(*TaskMeta_DockerMeta); ok {
			return x.DockerMeta
		}
	}
	return nil
}

func (x *TaskMeta) GetNativeMeta() *TaskMeta_Native {
	if x != nil {
		if x, ok := x.SpecificMeta.(*TaskMeta_NativeMeta); ok {
			return x.NativeMeta
		}
	}
	return nil
}

type isTaskMeta_SpecificMeta interface {
	isTaskMeta_SpecificMeta()
}

type TaskMeta_DockerMeta struct {
	DockerMeta *TaskMeta_Docker `protobuf:"bytes,3,opt,name=docker_meta,json=dockerMeta,proto3,oneof"`
}

type TaskMeta_NativeMeta struct {
	NativeMeta *TaskMeta_Native `protobuf:"bytes,4,opt,name=native_meta,json=nativeMeta,proto3,oneof"`
}

func (*TaskMeta_DockerMeta) isTaskMeta_SpecificMeta() {}

func (*TaskMeta_NativeMeta) isTaskMeta_SpecificMeta() {}

type EnvironmentVariable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnvironmentVariable) Reset() {
	*x = EnvironmentVariable{}
	mi := &file_proto_v1_shared_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentVariable) ProtoMessage() {}

func (x *EnvironmentVariable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_shared_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentVariable.ProtoReflect.Descriptor instead.
func (*EnvironmentVariable) Descriptor() ([]byte, []int) {
	return file_proto_v1_shared_proto_rawDescGZIP(), []int{5}
}

func (x *EnvironmentVariable) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EnvironmentVariable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type GitRepo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Sha           string                 `protobuf:"bytes,2,opt,name=sha,proto3" json:"sha,omitempty"`
	Branch        string                 `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
	FetchDepth    int32                  `protobuf:"varint,4,opt,name=fetch_depth,json=fetchDepth,proto3" json:"fetch_depth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitRepo) Reset() {
	*x = GitRepo{}
	mi := &file_proto_v1_shared_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitRepo) ProtoMessage() {}

func (x *GitRepo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_shared_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitRepo.ProtoReflect.Descriptor instead.
func (*GitRepo) Descriptor() ([]byte, []int) {
	return file_proto_v1_shared_proto_rawDescGZIP(), []int{6}
}

func (x *GitRepo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GitRepo) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *GitRepo) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *GitRepo) GetFetchDepth() int32 {
	if x != nil {
		return x.FetchDepth
	}
	return 0
}

type ExecInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cmd           string                 `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Cwd           string                 `protobuf:"bytes,2,opt,name=cwd,proto3" json:"cwd,omitempty"`
	Env           []*EnvironmentVariable `protobuf:"bytes,3,rep,name=env,proto3" json:"env,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecInfo) Reset() {
	*x = ExecInfo{}
	mi := &file_proto_v1_shared_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecInfo) ProtoMessage() {}

func (x *ExecInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_shared_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecInfo.ProtoReflect.Descriptor instead.
func (*ExecInfo) Descriptor() ([]byte, []int) {
	return file_proto_v1_shared_proto_rawDescGZIP(), []int{7}
}

func (x *ExecInfo) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *ExecInfo) GetCwd() string {
	if x != nil {
		return x.Cwd
	}
	return ""
}

func (x *ExecInfo) GetEnv() []*EnvironmentVariable {
	if x != nil {
		return x.Env
	}
	return nil
}

type StepExecPayload struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are valid to be assigned to LogData:
	//
	//	*StepExecPayload_Stdout
	//	*StepExecPayload_Stderr
	//	*StepExecPayload_ExitCode
	LogData       isStepExecPayload_LogData `protobuf_oneof:"log_data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepExecPayload) Reset() {
	*x = StepExecPayload{}
	mi := &file_proto_v1_shared_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepExecPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepExecPayload) ProtoMessage() {}

func (x *StepExecPayload) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_shared_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepExecPayload.ProtoReflect.Descriptor instead.
func (*StepExecPayload) Descriptor() ([]byte, []int) {
	return file_proto_v1_shared_proto_rawDescGZIP(), []int{8}
}

func (x *StepExecPayload) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *StepExecPayload) GetLogData() isStepExecPayload_LogData {
	if x != nil {
		return x.LogData
	}
	return nil
}

func (x *StepExecPayload) GetStdout() []byte {
	if x != nil {
		if x, ok := x.LogData.(*StepExecPayload_Stdout); ok {
			return x.Stdout
		}
	}
	return nil
}

func (x *StepExecPayload) GetStderr() []byte {
	if x != nil {
		if x, ok := x.LogData.(*StepExecPayload_Stderr); ok {
			return x.Stderr
		}
	}
	return nil
}

func (x *StepExecPayload) GetExitCode() int32 {
	if x != nil {
		if x, ok := x.LogData.(*StepExecPayload_ExitCode); ok {
			return x.ExitCode
		}
	}
	return 0
}

type isStepExecPayload_LogData interface {
	isStepExecPayload_LogData()
}

type StepExecPayload_Stdout struct {
	Stdout []byte `protobuf:"bytes,2,opt,name=stdout,proto3,oneof"`
}

type StepExecPayload_Stderr struct {
	Stderr []byte `protobuf:"bytes,3,opt,name=stderr,proto3,oneof"`
}

type StepExecPayload_ExitCode struct {
	ExitCode int32 `protobuf:"varint,4,opt,name=exit_code,json=exitCode,proto3,oneof"`
}

func (*StepExecPayload_Stdout) isStepExecPayload_LogData() {}

func (*StepExecPayload_Stderr) isStepExecPayload_LogData() {}

func (*StepExecPayload_ExitCode) isStepExecPayload_LogData() {}

type LogMessage struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	WorkflowJwt string                 `protobuf:"bytes,1,opt,name=workflow_jwt,json=workflowJwt,proto3" json:"workflow_jwt,omitempty"`
	JobId       *string                `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3,oneof" json:"job_id,omitempty"` // If not set, it's a workflow orchestration log
	// Types that are valid to be assigned to LogData:
	//
	//	*LogMessage_ExecData_
	LogData       isLogMessage_LogData `protobuf_oneof:"log_data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogMessage) Reset() {
	*x = LogMessage{}
	mi := &file_proto_v1_shared_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessage) ProtoMessage() {}

func (x *LogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_shared_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMessage.ProtoReflect.Descriptor instead.
func (*LogMessage) Descriptor() ([]byte, []int) {
	return file_proto_v1_shared_proto_rawDescGZIP(), []int{9}
}

func (x *LogMessage) GetWorkflowJwt() string {
	if x != nil {
		return x.WorkflowJwt
	}
	return ""
}

func (x *LogMessage) GetJobId() string {
	if x != nil && x.JobId != nil {
		return *x.JobId
	}
	return ""
}

func (x *LogMessage) GetLogData() isLogMessage_LogData {
	if x != nil {
		return x.LogData
	}
	return nil
}

func (x *LogMessage) GetExecData() *LogMessage_ExecData {
	if x != nil {
		if x, ok := x.LogData.(*LogMessage_ExecData_); ok {
			return x.ExecData
		}
	}
	return nil
}

type isLogMessage_LogData interface {
	isLogMessage_LogData()
}

type LogMessage_ExecData_ struct {
	ExecData *LogMessage_ExecData `protobuf:"bytes,3,opt,name=exec_data,json=execData,proto3,oneof"`
}

func (*LogMessage_ExecData_) isLogMessage_LogData() {}

type StartTaskData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to Data:
	//
	//	*StartTaskData_DockerData
	//	*StartTaskData_NativeData
	Data          isStartTaskData_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartTaskData) Reset() {
	*x = StartTaskData{}
	mi := &file_proto_v1_shared_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTaskData) ProtoMessage() {}

func (x *StartTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_shared_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTaskData.ProtoReflect.Descriptor instead.
func (*StartTaskData) Descriptor() ([]byte, []int) {
	return file_proto_v1_shared_proto_rawDescGZIP(), []int{10}
}

func (x *StartTaskData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StartTaskData) GetData() isStartTaskData_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StartTaskData) GetDockerData() *StartTaskData_Docker {
	if x != nil {
		if x, ok := x.Data.(*StartTaskData_DockerData); ok {
			return x.DockerData
		}
	}
	return nil
}

func (x *StartTaskData) GetNativeData() *StartTaskData_Native {
	if x != nil {
		if x, ok := x.Data.(*StartTaskData_NativeData); ok {
			return x.NativeData
		}
	}
	return nil
}

type isStartTaskData_Data interface {
	isStartTaskData_Data()
}

type StartTaskData_DockerData struct {
	DockerData *StartTaskData_Docker `protobuf:"bytes,2,opt,name=docker_data,json=dockerData,proto3,oneof"`
}

type StartTaskData_NativeData struct {
	NativeData *StartTaskData_Native `protobuf:"bytes,3,opt,name=native_data,json=nativeData,proto3,oneof"`
}

func (*StartTaskData_DockerData) isStartTaskData_Data() {}

func (*StartTaskData_NativeData) isStartTaskData_Data() {}

type WorkflowAlert struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          WorkflowAlert_Type     `protobuf:"varint,2,opt,name=type,proto3,enum=proto.v1.WorkflowAlert_Type" json:"type,omitempty"`
	Title         string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Message       string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowAlert) Reset() {
	*x = WorkflowAlert{}
	mi := &file_proto_v1_shared_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowAlert) ProtoMessage() {}

func (x *WorkflowAlert) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_shared_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowAlert.ProtoReflect.Descriptor instead.
func (*WorkflowAlert) Descriptor() ([]byte, []int) {
	return file_proto_v1_shared_proto_rawDescGZIP(), []int{11}
}

func (x *WorkflowAlert) GetType() WorkflowAlert_Type {
	if x != nil {
		return x.Type
	}
	return WorkflowAlert_TYPE_UNSPECIFIED
}

func (x *WorkflowAlert) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *WorkflowAlert) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TaskMeta_Docker struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskMeta_Docker) Reset() {
	*x = TaskMeta_Docker{}
	mi := &file_proto_v1_shared_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskMeta_Docker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskMeta_Docker) ProtoMessage() {}

func (x *TaskMeta_Docker) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_shared_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskMeta_Docker.ProtoReflect.Descriptor instead.
func (*TaskMeta_Docker) Descriptor() ([]byte, []int) {
	return file_proto_v1_shared_proto_rawDescGZIP(), []int{4, 0}
}

func (x *TaskMeta_Docker) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

type TaskMeta_Native struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskMeta_Native) Reset() {
	*x = TaskMeta_Native{}
	mi := &file_proto_v1_shared_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskMeta_Native) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskMeta_Native) ProtoMessage() {}

func (x *TaskMeta_Native) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_shared_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskMeta_Native.ProtoReflect.Descriptor instead.
func (*TaskMeta_Native) Descriptor() ([]byte, []int) {
	return file_proto_v1_shared_proto_rawDescGZIP(), []int{4, 1}
}

type LogMessage_ExecData struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Type          LogMessage_ExecData_Type `protobuf:"varint,1,opt,name=type,proto3,enum=proto.v1.LogMessage_ExecData_Type" json:"type,omitempty"`
	Data          []byte                   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	WrittenAt     string                   `protobuf:"bytes,3,opt,name=written_at,json=writtenAt,proto3" json:"written_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogMessage_ExecData) Reset() {
	*x = LogMessage_ExecData{}
	mi := &file_proto_v1_shared_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogMessage_ExecData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessage_ExecData) ProtoMessage() {}

func (x *LogMessage_ExecData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_shared_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMessage_ExecData.ProtoReflect.Descriptor instead.
func (*LogMessage_ExecData) Descriptor() ([]byte, []int) {
	return file_proto_v1_shared_proto_rawDescGZIP(), []int{9, 0}
}

func (x *LogMessage_ExecData) GetType() LogMessage_ExecData_Type {
	if x != nil {
		return x.Type
	}
	return LogMessage_ExecData_TYPE_UNSPECIFIED
}

func (x *LogMessage_ExecData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LogMessage_ExecData) GetWrittenAt() string {
	if x != nil {
		return x.WrittenAt
	}
	return ""
}

type StartTaskData_Docker struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Image         string                               `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Volumes       []*StartTaskData_Docker_DockerVolume `protobuf:"bytes,2,rep,name=volumes,proto3" json:"volumes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartTaskData_Docker) Reset() {
	*x = StartTaskData_Docker{}
	mi := &file_proto_v1_shared_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTaskData_Docker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTaskData_Docker) ProtoMessage() {}

func (x *StartTaskData_Docker) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_shared_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTaskData_Docker.ProtoReflect.Descriptor instead.
func (*StartTaskData_Docker) Descriptor() ([]byte, []int) {
	return file_proto_v1_shared_proto_rawDescGZIP(), []int{10, 0}
}

func (x *StartTaskData_Docker) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *StartTaskData_Docker) GetVolumes() []*StartTaskData_Docker_DockerVolume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type StartTaskData_Native struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartTaskData_Native) Reset() {
	*x = StartTaskData_Native{}
	mi := &file_proto_v1_shared_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTaskData_Native) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTaskData_Native) ProtoMessage() {}

func (x *StartTaskData_Native) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_shared_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTaskData_Native.ProtoReflect.Descriptor instead.
func (*StartTaskData_Native) Descriptor() ([]byte, []int) {
	return file_proto_v1_shared_proto_rawDescGZIP(), []int{10, 1}
}

type StartTaskData_Docker_DockerVolume struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	Source        string                                 `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Type          StartTaskData_Docker_DockerVolume_Type `protobuf:"varint,2,opt,name=type,proto3,enum=proto.v1.StartTaskData_Docker_DockerVolume_Type" json:"type,omitempty"`
	Target        string                                 `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartTaskData_Docker_DockerVolume) Reset() {
	*x = StartTaskData_Docker_DockerVolume{}
	mi := &file_proto_v1_shared_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTaskData_Docker_DockerVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTaskData_Docker_DockerVolume) ProtoMessage() {}

func (x *StartTaskData_Docker_DockerVolume) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_shared_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTaskData_Docker_DockerVolume.ProtoReflect.Descriptor instead.
func (*StartTaskData_Docker_DockerVolume) Descriptor() ([]byte, []int) {
	return file_proto_v1_shared_proto_rawDescGZIP(), []int{10, 0, 0}
}

func (x *StartTaskData_Docker_DockerVolume) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *StartTaskData_Docker_DockerVolume) GetType() StartTaskData_Docker_DockerVolume_Type {
	if x != nil {
		return x.Type
	}
	return StartTaskData_Docker_DockerVolume_TYPE_UNSPECIFIED
}

func (x *StartTaskData_Docker_DockerVolume) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

var File_proto_v1_shared_proto protoreflect.FileDescriptor

var file_proto_v1_shared_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x4a, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x9b,
	0x01, 0x0a, 0x0a, 0x46, 0x6c, 0x79, 0x52, 0x75, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0xf1, 0x03, 0x0a,
	0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6a, 0x77, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4a, 0x77, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x6e, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x52,
	0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x70, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x08, 0x66, 0x6c, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x6c, 0x79, 0x52, 0x75, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07,
	0x66, 0x6c, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x75,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x42, 0x0d, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0xdd, 0x01, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x12, 0x31, 0x0a, 0x08, 0x66, 0x6c, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x6c, 0x79, 0x52, 0x75, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x66, 0x6c,
	0x79, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x42, 0x0d, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x22, 0xf2, 0x01, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x3c, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x1a, 0x2b, 0x0a,
	0x06, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x08, 0x0a, 0x06, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x3d, 0x0a, 0x13, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x66, 0x0a, 0x07, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x68, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x44, 0x65, 0x70, 0x74, 0x68, 0x22, 0x5f, 0x0a, 0x08,
	0x45, 0x78, 0x65, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x77,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x77, 0x64, 0x12, 0x2f, 0x0a, 0x03,
	0x65, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x22, 0xaa, 0x01,
	0x0a, 0x0f, 0x53, 0x74, 0x65, 0x70, 0x45, 0x78, 0x65, 0x63, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x06, 0x73,
	0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12,
	0x1d, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd8, 0x02, 0x0a, 0x0a, 0x4c,
	0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6a, 0x77, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4a, 0x77, 0x74, 0x12, 0x1a, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78,
	0x65, 0x63, 0x44, 0x61, 0x74, 0x61, 0x1a, 0xb5, 0x01, 0x0a, 0x08, 0x45, 0x78, 0x65, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1d, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x41, 0x74, 0x22, 0x3e,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x44, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x44, 0x45, 0x52, 0x52, 0x10, 0x02, 0x42, 0x0a,
	0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x22, 0xe8, 0x03, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x64,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41,
	0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0xaa, 0x02, 0x0a, 0x06, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x1a, 0xc2, 0x01, 0x0a, 0x0c, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x22, 0x3c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x02, 0x1a, 0x08,
	0x0a, 0x06, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xc0, 0x01, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x4d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x10, 0x03, 0x2a, 0x51, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x57, 0x4f, 0x52, 0x4b, 0x46,
	0x4c, 0x4f, 0x57, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x4f,
	0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x44, 0x45, 0x4e, 0x4f, 0x10, 0x01, 0x2a, 0x8b, 0x01, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54,
	0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x5f,
	0x4f, 0x50, 0x45, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x49, 0x47,
	0x47, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x04, 0x12, 0x15, 0x0a,
	0x11, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x44, 0x10, 0x05, 0x2a, 0x70, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x43, 0x4c, 0x55,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4b, 0x49,
	0x50, 0x50, 0x45, 0x44, 0x10, 0x03, 0x42, 0x0d, 0x5a, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_v1_shared_proto_rawDescOnce sync.Once
	file_proto_v1_shared_proto_rawDescData = file_proto_v1_shared_proto_rawDesc
)

func file_proto_v1_shared_proto_rawDescGZIP() []byte {
	file_proto_v1_shared_proto_rawDescOnce.Do(func() {
		file_proto_v1_shared_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_v1_shared_proto_rawDescData)
	})
	return file_proto_v1_shared_proto_rawDescData
}

var file_proto_v1_shared_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_proto_v1_shared_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_proto_v1_shared_proto_goTypes = []any{
	(WorkflowLanguage)(0),                       // 0: proto.v1.WorkflowLanguage
	(Trigger)(0),                                // 1: proto.v1.Trigger
	(Conclusion)(0),                             // 2: proto.v1.Conclusion
	(LogMessage_ExecData_Type)(0),               // 3: proto.v1.LogMessage.ExecData.Type
	(StartTaskData_Docker_DockerVolume_Type)(0), // 4: proto.v1.StartTaskData.Docker.DockerVolume.Type
	(WorkflowAlert_Type)(0),                     // 5: proto.v1.WorkflowAlert.Type
	(*DockerRunMeta)(nil),                       // 6: proto.v1.DockerRunMeta
	(*FlyRunMeta)(nil),                          // 7: proto.v1.FlyRunMeta
	(*WorkflowMeta)(nil),                        // 8: proto.v1.WorkflowMeta
	(*JobMeta)(nil),                             // 9: proto.v1.JobMeta
	(*TaskMeta)(nil),                            // 10: proto.v1.TaskMeta
	(*EnvironmentVariable)(nil),                 // 11: proto.v1.EnvironmentVariable
	(*GitRepo)(nil),                             // 12: proto.v1.GitRepo
	(*ExecInfo)(nil),                            // 13: proto.v1.ExecInfo
	(*StepExecPayload)(nil),                     // 14: proto.v1.StepExecPayload
	(*LogMessage)(nil),                          // 15: proto.v1.LogMessage
	(*StartTaskData)(nil),                       // 16: proto.v1.StartTaskData
	(*WorkflowAlert)(nil),                       // 17: proto.v1.WorkflowAlert
	(*TaskMeta_Docker)(nil),                     // 18: proto.v1.TaskMeta.Docker
	(*TaskMeta_Native)(nil),                     // 19: proto.v1.TaskMeta.Native
	(*LogMessage_ExecData)(nil),                 // 20: proto.v1.LogMessage.ExecData
	(*StartTaskData_Docker)(nil),                // 21: proto.v1.StartTaskData.Docker
	(*StartTaskData_Native)(nil),                // 22: proto.v1.StartTaskData.Native
	(*StartTaskData_Docker_DockerVolume)(nil),   // 23: proto.v1.StartTaskData.Docker.DockerVolume
	(*timestamppb.Timestamp)(nil),               // 24: google.protobuf.Timestamp
}
var file_proto_v1_shared_proto_depIdxs = []int32{
	24, // 0: proto.v1.DockerRunMeta.created_at:type_name -> google.protobuf.Timestamp
	24, // 1: proto.v1.FlyRunMeta.created_at:type_name -> google.protobuf.Timestamp
	24, // 2: proto.v1.WorkflowMeta.started_at:type_name -> google.protobuf.Timestamp
	24, // 3: proto.v1.WorkflowMeta.timeout_at:type_name -> google.protobuf.Timestamp
	12, // 4: proto.v1.WorkflowMeta.repo:type_name -> proto.v1.GitRepo
	1,  // 5: proto.v1.WorkflowMeta.trigger:type_name -> proto.v1.Trigger
	7,  // 6: proto.v1.WorkflowMeta.fly_meta:type_name -> proto.v1.FlyRunMeta
	6,  // 7: proto.v1.WorkflowMeta.docker_meta:type_name -> proto.v1.DockerRunMeta
	7,  // 8: proto.v1.JobMeta.fly_meta:type_name -> proto.v1.FlyRunMeta
	6,  // 9: proto.v1.JobMeta.docker_meta:type_name -> proto.v1.DockerRunMeta
	18, // 10: proto.v1.TaskMeta.docker_meta:type_name -> proto.v1.TaskMeta.Docker
	19, // 11: proto.v1.TaskMeta.native_meta:type_name -> proto.v1.TaskMeta.Native
	11, // 12: proto.v1.ExecInfo.env:type_name -> proto.v1.EnvironmentVariable
	24, // 13: proto.v1.StepExecPayload.timestamp:type_name -> google.protobuf.Timestamp
	20, // 14: proto.v1.LogMessage.exec_data:type_name -> proto.v1.LogMessage.ExecData
	21, // 15: proto.v1.StartTaskData.docker_data:type_name -> proto.v1.StartTaskData.Docker
	22, // 16: proto.v1.StartTaskData.native_data:type_name -> proto.v1.StartTaskData.Native
	5,  // 17: proto.v1.WorkflowAlert.type:type_name -> proto.v1.WorkflowAlert.Type
	3,  // 18: proto.v1.LogMessage.ExecData.type:type_name -> proto.v1.LogMessage.ExecData.Type
	23, // 19: proto.v1.StartTaskData.Docker.volumes:type_name -> proto.v1.StartTaskData.Docker.DockerVolume
	4,  // 20: proto.v1.StartTaskData.Docker.DockerVolume.type:type_name -> proto.v1.StartTaskData.Docker.DockerVolume.Type
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_proto_v1_shared_proto_init() }
func file_proto_v1_shared_proto_init() {
	if File_proto_v1_shared_proto != nil {
		return
	}
	file_proto_v1_shared_proto_msgTypes[2].OneofWrappers = []any{
		(*WorkflowMeta_FlyMeta)(nil),
		(*WorkflowMeta_DockerMeta)(nil),
	}
	file_proto_v1_shared_proto_msgTypes[3].OneofWrappers = []any{
		(*JobMeta_FlyMeta)(nil),
		(*JobMeta_DockerMeta)(nil),
	}
	file_proto_v1_shared_proto_msgTypes[4].OneofWrappers = []any{
		(*TaskMeta_DockerMeta)(nil),
		(*TaskMeta_NativeMeta)(nil),
	}
	file_proto_v1_shared_proto_msgTypes[8].OneofWrappers = []any{
		(*StepExecPayload_Stdout)(nil),
		(*StepExecPayload_Stderr)(nil),
		(*StepExecPayload_ExitCode)(nil),
	}
	file_proto_v1_shared_proto_msgTypes[9].OneofWrappers = []any{
		(*LogMessage_ExecData_)(nil),
	}
	file_proto_v1_shared_proto_msgTypes[10].OneofWrappers = []any{
		(*StartTaskData_DockerData)(nil),
		(*StartTaskData_NativeData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_v1_shared_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_v1_shared_proto_goTypes,
		DependencyIndexes: file_proto_v1_shared_proto_depIdxs,
		EnumInfos:         file_proto_v1_shared_proto_enumTypes,
		MessageInfos:      file_proto_v1_shared_proto_msgTypes,
	}.Build()
	File_proto_v1_shared_proto = out.File
	file_proto_v1_shared_proto_rawDesc = nil
	file_proto_v1_shared_proto_goTypes = nil
	file_proto_v1_shared_proto_depIdxs = nil
}
