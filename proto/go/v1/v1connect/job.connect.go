// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/v1/job.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "github.com/pandaci-com/pandaci/proto/go/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// JobServiceName is the fully-qualified name of the JobService service.
	JobServiceName = "proto.v1.JobService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// JobServiceStartTaskProcedure is the fully-qualified name of the JobService's StartTask RPC.
	JobServiceStartTaskProcedure = "/proto.v1.JobService/StartTask"
	// JobServiceStopTaskProcedure is the fully-qualified name of the JobService's StopTask RPC.
	JobServiceStopTaskProcedure = "/proto.v1.JobService/StopTask"
	// JobServiceStartStepProcedure is the fully-qualified name of the JobService's StartStep RPC.
	JobServiceStartStepProcedure = "/proto.v1.JobService/StartStep"
	// JobServiceStopStepProcedure is the fully-qualified name of the JobService's StopStep RPC.
	JobServiceStopStepProcedure = "/proto.v1.JobService/StopStep"
	// JobServiceCreateJobVolumeProcedure is the fully-qualified name of the JobService's
	// CreateJobVolume RPC.
	JobServiceCreateJobVolumeProcedure = "/proto.v1.JobService/CreateJobVolume"
	// JobServicePingProcedure is the fully-qualified name of the JobService's Ping RPC.
	JobServicePingProcedure = "/proto.v1.JobService/Ping"
)

// JobServiceClient is a client for the proto.v1.JobService service.
type JobServiceClient interface {
	StartTask(context.Context, *connect.Request[v1.JobServiceStartTaskRequest]) (*connect.Response[v1.JobServiceStartTaskResponse], error)
	StopTask(context.Context, *connect.Request[v1.JobServiceStopTaskRequest]) (*connect.Response[v1.JobServiceStopTaskResponse], error)
	StartStep(context.Context, *connect.Request[v1.JobServiceStartStepRequest]) (*connect.ServerStreamForClient[v1.JobServiceStartStepResponse], error)
	StopStep(context.Context, *connect.Request[v1.JobServiceStopStepRequest]) (*connect.Response[v1.JobServiceStopStepResponse], error)
	CreateJobVolume(context.Context, *connect.Request[v1.JobServiceCreateJobVolumeRequest]) (*connect.Response[v1.JobServiceCreateJobVolumeResponse], error)
	Ping(context.Context, *connect.Request[v1.JobServicePingRequest]) (*connect.Response[v1.JobServicePingResponse], error)
}

// NewJobServiceClient constructs a client for the proto.v1.JobService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewJobServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) JobServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	jobServiceMethods := v1.File_proto_v1_job_proto.Services().ByName("JobService").Methods()
	return &jobServiceClient{
		startTask: connect.NewClient[v1.JobServiceStartTaskRequest, v1.JobServiceStartTaskResponse](
			httpClient,
			baseURL+JobServiceStartTaskProcedure,
			connect.WithSchema(jobServiceMethods.ByName("StartTask")),
			connect.WithClientOptions(opts...),
		),
		stopTask: connect.NewClient[v1.JobServiceStopTaskRequest, v1.JobServiceStopTaskResponse](
			httpClient,
			baseURL+JobServiceStopTaskProcedure,
			connect.WithSchema(jobServiceMethods.ByName("StopTask")),
			connect.WithClientOptions(opts...),
		),
		startStep: connect.NewClient[v1.JobServiceStartStepRequest, v1.JobServiceStartStepResponse](
			httpClient,
			baseURL+JobServiceStartStepProcedure,
			connect.WithSchema(jobServiceMethods.ByName("StartStep")),
			connect.WithClientOptions(opts...),
		),
		stopStep: connect.NewClient[v1.JobServiceStopStepRequest, v1.JobServiceStopStepResponse](
			httpClient,
			baseURL+JobServiceStopStepProcedure,
			connect.WithSchema(jobServiceMethods.ByName("StopStep")),
			connect.WithClientOptions(opts...),
		),
		createJobVolume: connect.NewClient[v1.JobServiceCreateJobVolumeRequest, v1.JobServiceCreateJobVolumeResponse](
			httpClient,
			baseURL+JobServiceCreateJobVolumeProcedure,
			connect.WithSchema(jobServiceMethods.ByName("CreateJobVolume")),
			connect.WithClientOptions(opts...),
		),
		ping: connect.NewClient[v1.JobServicePingRequest, v1.JobServicePingResponse](
			httpClient,
			baseURL+JobServicePingProcedure,
			connect.WithSchema(jobServiceMethods.ByName("Ping")),
			connect.WithClientOptions(opts...),
		),
	}
}

// jobServiceClient implements JobServiceClient.
type jobServiceClient struct {
	startTask       *connect.Client[v1.JobServiceStartTaskRequest, v1.JobServiceStartTaskResponse]
	stopTask        *connect.Client[v1.JobServiceStopTaskRequest, v1.JobServiceStopTaskResponse]
	startStep       *connect.Client[v1.JobServiceStartStepRequest, v1.JobServiceStartStepResponse]
	stopStep        *connect.Client[v1.JobServiceStopStepRequest, v1.JobServiceStopStepResponse]
	createJobVolume *connect.Client[v1.JobServiceCreateJobVolumeRequest, v1.JobServiceCreateJobVolumeResponse]
	ping            *connect.Client[v1.JobServicePingRequest, v1.JobServicePingResponse]
}

// StartTask calls proto.v1.JobService.StartTask.
func (c *jobServiceClient) StartTask(ctx context.Context, req *connect.Request[v1.JobServiceStartTaskRequest]) (*connect.Response[v1.JobServiceStartTaskResponse], error) {
	return c.startTask.CallUnary(ctx, req)
}

// StopTask calls proto.v1.JobService.StopTask.
func (c *jobServiceClient) StopTask(ctx context.Context, req *connect.Request[v1.JobServiceStopTaskRequest]) (*connect.Response[v1.JobServiceStopTaskResponse], error) {
	return c.stopTask.CallUnary(ctx, req)
}

// StartStep calls proto.v1.JobService.StartStep.
func (c *jobServiceClient) StartStep(ctx context.Context, req *connect.Request[v1.JobServiceStartStepRequest]) (*connect.ServerStreamForClient[v1.JobServiceStartStepResponse], error) {
	return c.startStep.CallServerStream(ctx, req)
}

// StopStep calls proto.v1.JobService.StopStep.
func (c *jobServiceClient) StopStep(ctx context.Context, req *connect.Request[v1.JobServiceStopStepRequest]) (*connect.Response[v1.JobServiceStopStepResponse], error) {
	return c.stopStep.CallUnary(ctx, req)
}

// CreateJobVolume calls proto.v1.JobService.CreateJobVolume.
func (c *jobServiceClient) CreateJobVolume(ctx context.Context, req *connect.Request[v1.JobServiceCreateJobVolumeRequest]) (*connect.Response[v1.JobServiceCreateJobVolumeResponse], error) {
	return c.createJobVolume.CallUnary(ctx, req)
}

// Ping calls proto.v1.JobService.Ping.
func (c *jobServiceClient) Ping(ctx context.Context, req *connect.Request[v1.JobServicePingRequest]) (*connect.Response[v1.JobServicePingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// JobServiceHandler is an implementation of the proto.v1.JobService service.
type JobServiceHandler interface {
	StartTask(context.Context, *connect.Request[v1.JobServiceStartTaskRequest]) (*connect.Response[v1.JobServiceStartTaskResponse], error)
	StopTask(context.Context, *connect.Request[v1.JobServiceStopTaskRequest]) (*connect.Response[v1.JobServiceStopTaskResponse], error)
	StartStep(context.Context, *connect.Request[v1.JobServiceStartStepRequest], *connect.ServerStream[v1.JobServiceStartStepResponse]) error
	StopStep(context.Context, *connect.Request[v1.JobServiceStopStepRequest]) (*connect.Response[v1.JobServiceStopStepResponse], error)
	CreateJobVolume(context.Context, *connect.Request[v1.JobServiceCreateJobVolumeRequest]) (*connect.Response[v1.JobServiceCreateJobVolumeResponse], error)
	Ping(context.Context, *connect.Request[v1.JobServicePingRequest]) (*connect.Response[v1.JobServicePingResponse], error)
}

// NewJobServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewJobServiceHandler(svc JobServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	jobServiceMethods := v1.File_proto_v1_job_proto.Services().ByName("JobService").Methods()
	jobServiceStartTaskHandler := connect.NewUnaryHandler(
		JobServiceStartTaskProcedure,
		svc.StartTask,
		connect.WithSchema(jobServiceMethods.ByName("StartTask")),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceStopTaskHandler := connect.NewUnaryHandler(
		JobServiceStopTaskProcedure,
		svc.StopTask,
		connect.WithSchema(jobServiceMethods.ByName("StopTask")),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceStartStepHandler := connect.NewServerStreamHandler(
		JobServiceStartStepProcedure,
		svc.StartStep,
		connect.WithSchema(jobServiceMethods.ByName("StartStep")),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceStopStepHandler := connect.NewUnaryHandler(
		JobServiceStopStepProcedure,
		svc.StopStep,
		connect.WithSchema(jobServiceMethods.ByName("StopStep")),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceCreateJobVolumeHandler := connect.NewUnaryHandler(
		JobServiceCreateJobVolumeProcedure,
		svc.CreateJobVolume,
		connect.WithSchema(jobServiceMethods.ByName("CreateJobVolume")),
		connect.WithHandlerOptions(opts...),
	)
	jobServicePingHandler := connect.NewUnaryHandler(
		JobServicePingProcedure,
		svc.Ping,
		connect.WithSchema(jobServiceMethods.ByName("Ping")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.v1.JobService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case JobServiceStartTaskProcedure:
			jobServiceStartTaskHandler.ServeHTTP(w, r)
		case JobServiceStopTaskProcedure:
			jobServiceStopTaskHandler.ServeHTTP(w, r)
		case JobServiceStartStepProcedure:
			jobServiceStartStepHandler.ServeHTTP(w, r)
		case JobServiceStopStepProcedure:
			jobServiceStopStepHandler.ServeHTTP(w, r)
		case JobServiceCreateJobVolumeProcedure:
			jobServiceCreateJobVolumeHandler.ServeHTTP(w, r)
		case JobServicePingProcedure:
			jobServicePingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedJobServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedJobServiceHandler struct{}

func (UnimplementedJobServiceHandler) StartTask(context.Context, *connect.Request[v1.JobServiceStartTaskRequest]) (*connect.Response[v1.JobServiceStartTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.JobService.StartTask is not implemented"))
}

func (UnimplementedJobServiceHandler) StopTask(context.Context, *connect.Request[v1.JobServiceStopTaskRequest]) (*connect.Response[v1.JobServiceStopTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.JobService.StopTask is not implemented"))
}

func (UnimplementedJobServiceHandler) StartStep(context.Context, *connect.Request[v1.JobServiceStartStepRequest], *connect.ServerStream[v1.JobServiceStartStepResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.JobService.StartStep is not implemented"))
}

func (UnimplementedJobServiceHandler) StopStep(context.Context, *connect.Request[v1.JobServiceStopStepRequest]) (*connect.Response[v1.JobServiceStopStepResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.JobService.StopStep is not implemented"))
}

func (UnimplementedJobServiceHandler) CreateJobVolume(context.Context, *connect.Request[v1.JobServiceCreateJobVolumeRequest]) (*connect.Response[v1.JobServiceCreateJobVolumeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.JobService.CreateJobVolume is not implemented"))
}

func (UnimplementedJobServiceHandler) Ping(context.Context, *connect.Request[v1.JobServicePingRequest]) (*connect.Response[v1.JobServicePingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.JobService.Ping is not implemented"))
}
