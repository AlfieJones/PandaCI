// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/v1/orchestrator.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "github.com/pandaci-com/pandaci/proto/go/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrchestratorServiceName is the fully-qualified name of the OrchestratorService service.
	OrchestratorServiceName = "proto.v1.OrchestratorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrchestratorServiceWorkflowStartedProcedure is the fully-qualified name of the
	// OrchestratorService's WorkflowStarted RPC.
	OrchestratorServiceWorkflowStartedProcedure = "/proto.v1.OrchestratorService/WorkflowStarted"
	// OrchestratorServiceFinishWorkflowProcedure is the fully-qualified name of the
	// OrchestratorService's FinishWorkflow RPC.
	OrchestratorServiceFinishWorkflowProcedure = "/proto.v1.OrchestratorService/FinishWorkflow"
	// OrchestratorServiceCreateJobProcedure is the fully-qualified name of the OrchestratorService's
	// CreateJob RPC.
	OrchestratorServiceCreateJobProcedure = "/proto.v1.OrchestratorService/CreateJob"
	// OrchestratorServiceFinishJobProcedure is the fully-qualified name of the OrchestratorService's
	// FinishJob RPC.
	OrchestratorServiceFinishJobProcedure = "/proto.v1.OrchestratorService/FinishJob"
	// OrchestratorServiceJobStartedProcedure is the fully-qualified name of the OrchestratorService's
	// JobStarted RPC.
	OrchestratorServiceJobStartedProcedure = "/proto.v1.OrchestratorService/JobStarted"
	// OrchestratorServiceCreateTaskProcedure is the fully-qualified name of the OrchestratorService's
	// CreateTask RPC.
	OrchestratorServiceCreateTaskProcedure = "/proto.v1.OrchestratorService/CreateTask"
	// OrchestratorServiceFinishTaskProcedure is the fully-qualified name of the OrchestratorService's
	// FinishTask RPC.
	OrchestratorServiceFinishTaskProcedure = "/proto.v1.OrchestratorService/FinishTask"
	// OrchestratorServiceCreateStepProcedure is the fully-qualified name of the OrchestratorService's
	// CreateStep RPC.
	OrchestratorServiceCreateStepProcedure = "/proto.v1.OrchestratorService/CreateStep"
	// OrchestratorServiceFinishStepProcedure is the fully-qualified name of the OrchestratorService's
	// FinishStep RPC.
	OrchestratorServiceFinishStepProcedure = "/proto.v1.OrchestratorService/FinishStep"
	// OrchestratorServiceCreateWorkflowAlertProcedure is the fully-qualified name of the
	// OrchestratorService's CreateWorkflowAlert RPC.
	OrchestratorServiceCreateWorkflowAlertProcedure = "/proto.v1.OrchestratorService/CreateWorkflowAlert"
)

// OrchestratorServiceClient is a client for the proto.v1.OrchestratorService service.
type OrchestratorServiceClient interface {
	WorkflowStarted(context.Context, *connect.Request[v1.OrchestratorServiceWorkflowStartedRequest]) (*connect.Response[v1.OrchestratorServiceWorkflowStartedResponse], error)
	FinishWorkflow(context.Context, *connect.Request[v1.OrchestratorServiceFinishWorkflowRequest]) (*connect.Response[v1.OrchestratorServiceFinishWorkflowResponse], error)
	CreateJob(context.Context, *connect.Request[v1.OrchestratorServiceCreateJobRequest]) (*connect.Response[v1.OrchestratorServiceCreateJobResponse], error)
	FinishJob(context.Context, *connect.Request[v1.OrchestratorServiceFinishJobRequest]) (*connect.Response[v1.OrchestratorServiceFinishJobResponse], error)
	JobStarted(context.Context, *connect.Request[v1.OrchestratorServiceJobStartedRequest]) (*connect.Response[v1.OrchestratorServiceJobStartedResponse], error)
	CreateTask(context.Context, *connect.Request[v1.OrchestratorServiceCreateTaskRequest]) (*connect.Response[v1.OrchestratorServiceCreateTaskResponse], error)
	FinishTask(context.Context, *connect.Request[v1.OrchestratorServiceFinishTaskRequest]) (*connect.Response[v1.OrchestratorServiceFinishTaskResponse], error)
	CreateStep(context.Context, *connect.Request[v1.OrchestratorServiceCreateStepRequest]) (*connect.Response[v1.OrchestratorServiceCreateStepResponse], error)
	FinishStep(context.Context, *connect.Request[v1.OrchestratorServiceFinishStepRequest]) (*connect.Response[v1.OrchestratorServiceFinishStepResponse], error)
	CreateWorkflowAlert(context.Context, *connect.Request[v1.OrchestratorServiceCreateWorkflowAlertRequest]) (*connect.Response[v1.OrchestratorServiceCreateWorkflowAlertResponse], error)
}

// NewOrchestratorServiceClient constructs a client for the proto.v1.OrchestratorService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrchestratorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrchestratorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	orchestratorServiceMethods := v1.File_proto_v1_orchestrator_proto.Services().ByName("OrchestratorService").Methods()
	return &orchestratorServiceClient{
		workflowStarted: connect.NewClient[v1.OrchestratorServiceWorkflowStartedRequest, v1.OrchestratorServiceWorkflowStartedResponse](
			httpClient,
			baseURL+OrchestratorServiceWorkflowStartedProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("WorkflowStarted")),
			connect.WithClientOptions(opts...),
		),
		finishWorkflow: connect.NewClient[v1.OrchestratorServiceFinishWorkflowRequest, v1.OrchestratorServiceFinishWorkflowResponse](
			httpClient,
			baseURL+OrchestratorServiceFinishWorkflowProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("FinishWorkflow")),
			connect.WithClientOptions(opts...),
		),
		createJob: connect.NewClient[v1.OrchestratorServiceCreateJobRequest, v1.OrchestratorServiceCreateJobResponse](
			httpClient,
			baseURL+OrchestratorServiceCreateJobProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("CreateJob")),
			connect.WithClientOptions(opts...),
		),
		finishJob: connect.NewClient[v1.OrchestratorServiceFinishJobRequest, v1.OrchestratorServiceFinishJobResponse](
			httpClient,
			baseURL+OrchestratorServiceFinishJobProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("FinishJob")),
			connect.WithClientOptions(opts...),
		),
		jobStarted: connect.NewClient[v1.OrchestratorServiceJobStartedRequest, v1.OrchestratorServiceJobStartedResponse](
			httpClient,
			baseURL+OrchestratorServiceJobStartedProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("JobStarted")),
			connect.WithClientOptions(opts...),
		),
		createTask: connect.NewClient[v1.OrchestratorServiceCreateTaskRequest, v1.OrchestratorServiceCreateTaskResponse](
			httpClient,
			baseURL+OrchestratorServiceCreateTaskProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("CreateTask")),
			connect.WithClientOptions(opts...),
		),
		finishTask: connect.NewClient[v1.OrchestratorServiceFinishTaskRequest, v1.OrchestratorServiceFinishTaskResponse](
			httpClient,
			baseURL+OrchestratorServiceFinishTaskProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("FinishTask")),
			connect.WithClientOptions(opts...),
		),
		createStep: connect.NewClient[v1.OrchestratorServiceCreateStepRequest, v1.OrchestratorServiceCreateStepResponse](
			httpClient,
			baseURL+OrchestratorServiceCreateStepProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("CreateStep")),
			connect.WithClientOptions(opts...),
		),
		finishStep: connect.NewClient[v1.OrchestratorServiceFinishStepRequest, v1.OrchestratorServiceFinishStepResponse](
			httpClient,
			baseURL+OrchestratorServiceFinishStepProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("FinishStep")),
			connect.WithClientOptions(opts...),
		),
		createWorkflowAlert: connect.NewClient[v1.OrchestratorServiceCreateWorkflowAlertRequest, v1.OrchestratorServiceCreateWorkflowAlertResponse](
			httpClient,
			baseURL+OrchestratorServiceCreateWorkflowAlertProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("CreateWorkflowAlert")),
			connect.WithClientOptions(opts...),
		),
	}
}

// orchestratorServiceClient implements OrchestratorServiceClient.
type orchestratorServiceClient struct {
	workflowStarted     *connect.Client[v1.OrchestratorServiceWorkflowStartedRequest, v1.OrchestratorServiceWorkflowStartedResponse]
	finishWorkflow      *connect.Client[v1.OrchestratorServiceFinishWorkflowRequest, v1.OrchestratorServiceFinishWorkflowResponse]
	createJob           *connect.Client[v1.OrchestratorServiceCreateJobRequest, v1.OrchestratorServiceCreateJobResponse]
	finishJob           *connect.Client[v1.OrchestratorServiceFinishJobRequest, v1.OrchestratorServiceFinishJobResponse]
	jobStarted          *connect.Client[v1.OrchestratorServiceJobStartedRequest, v1.OrchestratorServiceJobStartedResponse]
	createTask          *connect.Client[v1.OrchestratorServiceCreateTaskRequest, v1.OrchestratorServiceCreateTaskResponse]
	finishTask          *connect.Client[v1.OrchestratorServiceFinishTaskRequest, v1.OrchestratorServiceFinishTaskResponse]
	createStep          *connect.Client[v1.OrchestratorServiceCreateStepRequest, v1.OrchestratorServiceCreateStepResponse]
	finishStep          *connect.Client[v1.OrchestratorServiceFinishStepRequest, v1.OrchestratorServiceFinishStepResponse]
	createWorkflowAlert *connect.Client[v1.OrchestratorServiceCreateWorkflowAlertRequest, v1.OrchestratorServiceCreateWorkflowAlertResponse]
}

// WorkflowStarted calls proto.v1.OrchestratorService.WorkflowStarted.
func (c *orchestratorServiceClient) WorkflowStarted(ctx context.Context, req *connect.Request[v1.OrchestratorServiceWorkflowStartedRequest]) (*connect.Response[v1.OrchestratorServiceWorkflowStartedResponse], error) {
	return c.workflowStarted.CallUnary(ctx, req)
}

// FinishWorkflow calls proto.v1.OrchestratorService.FinishWorkflow.
func (c *orchestratorServiceClient) FinishWorkflow(ctx context.Context, req *connect.Request[v1.OrchestratorServiceFinishWorkflowRequest]) (*connect.Response[v1.OrchestratorServiceFinishWorkflowResponse], error) {
	return c.finishWorkflow.CallUnary(ctx, req)
}

// CreateJob calls proto.v1.OrchestratorService.CreateJob.
func (c *orchestratorServiceClient) CreateJob(ctx context.Context, req *connect.Request[v1.OrchestratorServiceCreateJobRequest]) (*connect.Response[v1.OrchestratorServiceCreateJobResponse], error) {
	return c.createJob.CallUnary(ctx, req)
}

// FinishJob calls proto.v1.OrchestratorService.FinishJob.
func (c *orchestratorServiceClient) FinishJob(ctx context.Context, req *connect.Request[v1.OrchestratorServiceFinishJobRequest]) (*connect.Response[v1.OrchestratorServiceFinishJobResponse], error) {
	return c.finishJob.CallUnary(ctx, req)
}

// JobStarted calls proto.v1.OrchestratorService.JobStarted.
func (c *orchestratorServiceClient) JobStarted(ctx context.Context, req *connect.Request[v1.OrchestratorServiceJobStartedRequest]) (*connect.Response[v1.OrchestratorServiceJobStartedResponse], error) {
	return c.jobStarted.CallUnary(ctx, req)
}

// CreateTask calls proto.v1.OrchestratorService.CreateTask.
func (c *orchestratorServiceClient) CreateTask(ctx context.Context, req *connect.Request[v1.OrchestratorServiceCreateTaskRequest]) (*connect.Response[v1.OrchestratorServiceCreateTaskResponse], error) {
	return c.createTask.CallUnary(ctx, req)
}

// FinishTask calls proto.v1.OrchestratorService.FinishTask.
func (c *orchestratorServiceClient) FinishTask(ctx context.Context, req *connect.Request[v1.OrchestratorServiceFinishTaskRequest]) (*connect.Response[v1.OrchestratorServiceFinishTaskResponse], error) {
	return c.finishTask.CallUnary(ctx, req)
}

// CreateStep calls proto.v1.OrchestratorService.CreateStep.
func (c *orchestratorServiceClient) CreateStep(ctx context.Context, req *connect.Request[v1.OrchestratorServiceCreateStepRequest]) (*connect.Response[v1.OrchestratorServiceCreateStepResponse], error) {
	return c.createStep.CallUnary(ctx, req)
}

// FinishStep calls proto.v1.OrchestratorService.FinishStep.
func (c *orchestratorServiceClient) FinishStep(ctx context.Context, req *connect.Request[v1.OrchestratorServiceFinishStepRequest]) (*connect.Response[v1.OrchestratorServiceFinishStepResponse], error) {
	return c.finishStep.CallUnary(ctx, req)
}

// CreateWorkflowAlert calls proto.v1.OrchestratorService.CreateWorkflowAlert.
func (c *orchestratorServiceClient) CreateWorkflowAlert(ctx context.Context, req *connect.Request[v1.OrchestratorServiceCreateWorkflowAlertRequest]) (*connect.Response[v1.OrchestratorServiceCreateWorkflowAlertResponse], error) {
	return c.createWorkflowAlert.CallUnary(ctx, req)
}

// OrchestratorServiceHandler is an implementation of the proto.v1.OrchestratorService service.
type OrchestratorServiceHandler interface {
	WorkflowStarted(context.Context, *connect.Request[v1.OrchestratorServiceWorkflowStartedRequest]) (*connect.Response[v1.OrchestratorServiceWorkflowStartedResponse], error)
	FinishWorkflow(context.Context, *connect.Request[v1.OrchestratorServiceFinishWorkflowRequest]) (*connect.Response[v1.OrchestratorServiceFinishWorkflowResponse], error)
	CreateJob(context.Context, *connect.Request[v1.OrchestratorServiceCreateJobRequest]) (*connect.Response[v1.OrchestratorServiceCreateJobResponse], error)
	FinishJob(context.Context, *connect.Request[v1.OrchestratorServiceFinishJobRequest]) (*connect.Response[v1.OrchestratorServiceFinishJobResponse], error)
	JobStarted(context.Context, *connect.Request[v1.OrchestratorServiceJobStartedRequest]) (*connect.Response[v1.OrchestratorServiceJobStartedResponse], error)
	CreateTask(context.Context, *connect.Request[v1.OrchestratorServiceCreateTaskRequest]) (*connect.Response[v1.OrchestratorServiceCreateTaskResponse], error)
	FinishTask(context.Context, *connect.Request[v1.OrchestratorServiceFinishTaskRequest]) (*connect.Response[v1.OrchestratorServiceFinishTaskResponse], error)
	CreateStep(context.Context, *connect.Request[v1.OrchestratorServiceCreateStepRequest]) (*connect.Response[v1.OrchestratorServiceCreateStepResponse], error)
	FinishStep(context.Context, *connect.Request[v1.OrchestratorServiceFinishStepRequest]) (*connect.Response[v1.OrchestratorServiceFinishStepResponse], error)
	CreateWorkflowAlert(context.Context, *connect.Request[v1.OrchestratorServiceCreateWorkflowAlertRequest]) (*connect.Response[v1.OrchestratorServiceCreateWorkflowAlertResponse], error)
}

// NewOrchestratorServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrchestratorServiceHandler(svc OrchestratorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	orchestratorServiceMethods := v1.File_proto_v1_orchestrator_proto.Services().ByName("OrchestratorService").Methods()
	orchestratorServiceWorkflowStartedHandler := connect.NewUnaryHandler(
		OrchestratorServiceWorkflowStartedProcedure,
		svc.WorkflowStarted,
		connect.WithSchema(orchestratorServiceMethods.ByName("WorkflowStarted")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceFinishWorkflowHandler := connect.NewUnaryHandler(
		OrchestratorServiceFinishWorkflowProcedure,
		svc.FinishWorkflow,
		connect.WithSchema(orchestratorServiceMethods.ByName("FinishWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceCreateJobHandler := connect.NewUnaryHandler(
		OrchestratorServiceCreateJobProcedure,
		svc.CreateJob,
		connect.WithSchema(orchestratorServiceMethods.ByName("CreateJob")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceFinishJobHandler := connect.NewUnaryHandler(
		OrchestratorServiceFinishJobProcedure,
		svc.FinishJob,
		connect.WithSchema(orchestratorServiceMethods.ByName("FinishJob")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceJobStartedHandler := connect.NewUnaryHandler(
		OrchestratorServiceJobStartedProcedure,
		svc.JobStarted,
		connect.WithSchema(orchestratorServiceMethods.ByName("JobStarted")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceCreateTaskHandler := connect.NewUnaryHandler(
		OrchestratorServiceCreateTaskProcedure,
		svc.CreateTask,
		connect.WithSchema(orchestratorServiceMethods.ByName("CreateTask")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceFinishTaskHandler := connect.NewUnaryHandler(
		OrchestratorServiceFinishTaskProcedure,
		svc.FinishTask,
		connect.WithSchema(orchestratorServiceMethods.ByName("FinishTask")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceCreateStepHandler := connect.NewUnaryHandler(
		OrchestratorServiceCreateStepProcedure,
		svc.CreateStep,
		connect.WithSchema(orchestratorServiceMethods.ByName("CreateStep")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceFinishStepHandler := connect.NewUnaryHandler(
		OrchestratorServiceFinishStepProcedure,
		svc.FinishStep,
		connect.WithSchema(orchestratorServiceMethods.ByName("FinishStep")),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorServiceCreateWorkflowAlertHandler := connect.NewUnaryHandler(
		OrchestratorServiceCreateWorkflowAlertProcedure,
		svc.CreateWorkflowAlert,
		connect.WithSchema(orchestratorServiceMethods.ByName("CreateWorkflowAlert")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.v1.OrchestratorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrchestratorServiceWorkflowStartedProcedure:
			orchestratorServiceWorkflowStartedHandler.ServeHTTP(w, r)
		case OrchestratorServiceFinishWorkflowProcedure:
			orchestratorServiceFinishWorkflowHandler.ServeHTTP(w, r)
		case OrchestratorServiceCreateJobProcedure:
			orchestratorServiceCreateJobHandler.ServeHTTP(w, r)
		case OrchestratorServiceFinishJobProcedure:
			orchestratorServiceFinishJobHandler.ServeHTTP(w, r)
		case OrchestratorServiceJobStartedProcedure:
			orchestratorServiceJobStartedHandler.ServeHTTP(w, r)
		case OrchestratorServiceCreateTaskProcedure:
			orchestratorServiceCreateTaskHandler.ServeHTTP(w, r)
		case OrchestratorServiceFinishTaskProcedure:
			orchestratorServiceFinishTaskHandler.ServeHTTP(w, r)
		case OrchestratorServiceCreateStepProcedure:
			orchestratorServiceCreateStepHandler.ServeHTTP(w, r)
		case OrchestratorServiceFinishStepProcedure:
			orchestratorServiceFinishStepHandler.ServeHTTP(w, r)
		case OrchestratorServiceCreateWorkflowAlertProcedure:
			orchestratorServiceCreateWorkflowAlertHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrchestratorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrchestratorServiceHandler struct{}

func (UnimplementedOrchestratorServiceHandler) WorkflowStarted(context.Context, *connect.Request[v1.OrchestratorServiceWorkflowStartedRequest]) (*connect.Response[v1.OrchestratorServiceWorkflowStartedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.OrchestratorService.WorkflowStarted is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) FinishWorkflow(context.Context, *connect.Request[v1.OrchestratorServiceFinishWorkflowRequest]) (*connect.Response[v1.OrchestratorServiceFinishWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.OrchestratorService.FinishWorkflow is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) CreateJob(context.Context, *connect.Request[v1.OrchestratorServiceCreateJobRequest]) (*connect.Response[v1.OrchestratorServiceCreateJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.OrchestratorService.CreateJob is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) FinishJob(context.Context, *connect.Request[v1.OrchestratorServiceFinishJobRequest]) (*connect.Response[v1.OrchestratorServiceFinishJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.OrchestratorService.FinishJob is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) JobStarted(context.Context, *connect.Request[v1.OrchestratorServiceJobStartedRequest]) (*connect.Response[v1.OrchestratorServiceJobStartedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.OrchestratorService.JobStarted is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) CreateTask(context.Context, *connect.Request[v1.OrchestratorServiceCreateTaskRequest]) (*connect.Response[v1.OrchestratorServiceCreateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.OrchestratorService.CreateTask is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) FinishTask(context.Context, *connect.Request[v1.OrchestratorServiceFinishTaskRequest]) (*connect.Response[v1.OrchestratorServiceFinishTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.OrchestratorService.FinishTask is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) CreateStep(context.Context, *connect.Request[v1.OrchestratorServiceCreateStepRequest]) (*connect.Response[v1.OrchestratorServiceCreateStepResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.OrchestratorService.CreateStep is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) FinishStep(context.Context, *connect.Request[v1.OrchestratorServiceFinishStepRequest]) (*connect.Response[v1.OrchestratorServiceFinishStepResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.OrchestratorService.FinishStep is not implemented"))
}

func (UnimplementedOrchestratorServiceHandler) CreateWorkflowAlert(context.Context, *connect.Request[v1.OrchestratorServiceCreateWorkflowAlertRequest]) (*connect.Response[v1.OrchestratorServiceCreateWorkflowAlertResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.OrchestratorService.CreateWorkflowAlert is not implemented"))
}
