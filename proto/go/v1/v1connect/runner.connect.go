// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/v1/runner.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "github.com/alfiejones/panda-ci/proto/go/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RunnerServiceName is the fully-qualified name of the RunnerService service.
	RunnerServiceName = "proto.v1.RunnerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RunnerServiceStartWorkflowProcedure is the fully-qualified name of the RunnerService's
	// StartWorkflow RPC.
	RunnerServiceStartWorkflowProcedure = "/proto.v1.RunnerService/StartWorkflow"
	// RunnerServiceStartJobProcedure is the fully-qualified name of the RunnerService's StartJob RPC.
	RunnerServiceStartJobProcedure = "/proto.v1.RunnerService/StartJob"
	// RunnerServiceStopJobProcedure is the fully-qualified name of the RunnerService's StopJob RPC.
	RunnerServiceStopJobProcedure = "/proto.v1.RunnerService/StopJob"
	// RunnerServiceJobStartedProcedure is the fully-qualified name of the RunnerService's JobStarted
	// RPC.
	RunnerServiceJobStartedProcedure = "/proto.v1.RunnerService/JobStarted"
	// RunnerServiceGetLogStreamProcedure is the fully-qualified name of the RunnerService's
	// GetLogStream RPC.
	RunnerServiceGetLogStreamProcedure = "/proto.v1.RunnerService/GetLogStream"
	// RunnerServiceCleanUpJobsProcedure is the fully-qualified name of the RunnerService's CleanUpJobs
	// RPC.
	RunnerServiceCleanUpJobsProcedure = "/proto.v1.RunnerService/CleanUpJobs"
)

// RunnerServiceClient is a client for the proto.v1.RunnerService service.
type RunnerServiceClient interface {
	StartWorkflow(context.Context, *connect.Request[v1.RunnerServiceStartWorkflowRequest]) (*connect.Response[v1.RunnerServiceStartWorkflowResponse], error)
	StartJob(context.Context, *connect.Request[v1.RunnerServiceStartJobRequest]) (*connect.Response[v1.RunnerServiceStartJobResponse], error)
	StopJob(context.Context, *connect.Request[v1.RunnerServiceStopJobRequest]) (*connect.Response[v1.RunnerServiceStopJobResponse], error)
	JobStarted(context.Context, *connect.Request[v1.RunnerServiceJobStartedRequest]) (*connect.Response[v1.RunnerServiceJobStartedResponse], error)
	GetLogStream(context.Context, *connect.Request[v1.RunnerServiceGetLogStreamRequest]) (*connect.Response[v1.RunnerServiceGetLogStreamResponse], error)
	CleanUpJobs(context.Context, *connect.Request[v1.RunnerServiceCleanUpJobsRequest]) (*connect.Response[v1.RunnerServiceCleanUpJobsResponse], error)
}

// NewRunnerServiceClient constructs a client for the proto.v1.RunnerService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRunnerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RunnerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	runnerServiceMethods := v1.File_proto_v1_runner_proto.Services().ByName("RunnerService").Methods()
	return &runnerServiceClient{
		startWorkflow: connect.NewClient[v1.RunnerServiceStartWorkflowRequest, v1.RunnerServiceStartWorkflowResponse](
			httpClient,
			baseURL+RunnerServiceStartWorkflowProcedure,
			connect.WithSchema(runnerServiceMethods.ByName("StartWorkflow")),
			connect.WithClientOptions(opts...),
		),
		startJob: connect.NewClient[v1.RunnerServiceStartJobRequest, v1.RunnerServiceStartJobResponse](
			httpClient,
			baseURL+RunnerServiceStartJobProcedure,
			connect.WithSchema(runnerServiceMethods.ByName("StartJob")),
			connect.WithClientOptions(opts...),
		),
		stopJob: connect.NewClient[v1.RunnerServiceStopJobRequest, v1.RunnerServiceStopJobResponse](
			httpClient,
			baseURL+RunnerServiceStopJobProcedure,
			connect.WithSchema(runnerServiceMethods.ByName("StopJob")),
			connect.WithClientOptions(opts...),
		),
		jobStarted: connect.NewClient[v1.RunnerServiceJobStartedRequest, v1.RunnerServiceJobStartedResponse](
			httpClient,
			baseURL+RunnerServiceJobStartedProcedure,
			connect.WithSchema(runnerServiceMethods.ByName("JobStarted")),
			connect.WithClientOptions(opts...),
		),
		getLogStream: connect.NewClient[v1.RunnerServiceGetLogStreamRequest, v1.RunnerServiceGetLogStreamResponse](
			httpClient,
			baseURL+RunnerServiceGetLogStreamProcedure,
			connect.WithSchema(runnerServiceMethods.ByName("GetLogStream")),
			connect.WithClientOptions(opts...),
		),
		cleanUpJobs: connect.NewClient[v1.RunnerServiceCleanUpJobsRequest, v1.RunnerServiceCleanUpJobsResponse](
			httpClient,
			baseURL+RunnerServiceCleanUpJobsProcedure,
			connect.WithSchema(runnerServiceMethods.ByName("CleanUpJobs")),
			connect.WithClientOptions(opts...),
		),
	}
}

// runnerServiceClient implements RunnerServiceClient.
type runnerServiceClient struct {
	startWorkflow *connect.Client[v1.RunnerServiceStartWorkflowRequest, v1.RunnerServiceStartWorkflowResponse]
	startJob      *connect.Client[v1.RunnerServiceStartJobRequest, v1.RunnerServiceStartJobResponse]
	stopJob       *connect.Client[v1.RunnerServiceStopJobRequest, v1.RunnerServiceStopJobResponse]
	jobStarted    *connect.Client[v1.RunnerServiceJobStartedRequest, v1.RunnerServiceJobStartedResponse]
	getLogStream  *connect.Client[v1.RunnerServiceGetLogStreamRequest, v1.RunnerServiceGetLogStreamResponse]
	cleanUpJobs   *connect.Client[v1.RunnerServiceCleanUpJobsRequest, v1.RunnerServiceCleanUpJobsResponse]
}

// StartWorkflow calls proto.v1.RunnerService.StartWorkflow.
func (c *runnerServiceClient) StartWorkflow(ctx context.Context, req *connect.Request[v1.RunnerServiceStartWorkflowRequest]) (*connect.Response[v1.RunnerServiceStartWorkflowResponse], error) {
	return c.startWorkflow.CallUnary(ctx, req)
}

// StartJob calls proto.v1.RunnerService.StartJob.
func (c *runnerServiceClient) StartJob(ctx context.Context, req *connect.Request[v1.RunnerServiceStartJobRequest]) (*connect.Response[v1.RunnerServiceStartJobResponse], error) {
	return c.startJob.CallUnary(ctx, req)
}

// StopJob calls proto.v1.RunnerService.StopJob.
func (c *runnerServiceClient) StopJob(ctx context.Context, req *connect.Request[v1.RunnerServiceStopJobRequest]) (*connect.Response[v1.RunnerServiceStopJobResponse], error) {
	return c.stopJob.CallUnary(ctx, req)
}

// JobStarted calls proto.v1.RunnerService.JobStarted.
func (c *runnerServiceClient) JobStarted(ctx context.Context, req *connect.Request[v1.RunnerServiceJobStartedRequest]) (*connect.Response[v1.RunnerServiceJobStartedResponse], error) {
	return c.jobStarted.CallUnary(ctx, req)
}

// GetLogStream calls proto.v1.RunnerService.GetLogStream.
func (c *runnerServiceClient) GetLogStream(ctx context.Context, req *connect.Request[v1.RunnerServiceGetLogStreamRequest]) (*connect.Response[v1.RunnerServiceGetLogStreamResponse], error) {
	return c.getLogStream.CallUnary(ctx, req)
}

// CleanUpJobs calls proto.v1.RunnerService.CleanUpJobs.
func (c *runnerServiceClient) CleanUpJobs(ctx context.Context, req *connect.Request[v1.RunnerServiceCleanUpJobsRequest]) (*connect.Response[v1.RunnerServiceCleanUpJobsResponse], error) {
	return c.cleanUpJobs.CallUnary(ctx, req)
}

// RunnerServiceHandler is an implementation of the proto.v1.RunnerService service.
type RunnerServiceHandler interface {
	StartWorkflow(context.Context, *connect.Request[v1.RunnerServiceStartWorkflowRequest]) (*connect.Response[v1.RunnerServiceStartWorkflowResponse], error)
	StartJob(context.Context, *connect.Request[v1.RunnerServiceStartJobRequest]) (*connect.Response[v1.RunnerServiceStartJobResponse], error)
	StopJob(context.Context, *connect.Request[v1.RunnerServiceStopJobRequest]) (*connect.Response[v1.RunnerServiceStopJobResponse], error)
	JobStarted(context.Context, *connect.Request[v1.RunnerServiceJobStartedRequest]) (*connect.Response[v1.RunnerServiceJobStartedResponse], error)
	GetLogStream(context.Context, *connect.Request[v1.RunnerServiceGetLogStreamRequest]) (*connect.Response[v1.RunnerServiceGetLogStreamResponse], error)
	CleanUpJobs(context.Context, *connect.Request[v1.RunnerServiceCleanUpJobsRequest]) (*connect.Response[v1.RunnerServiceCleanUpJobsResponse], error)
}

// NewRunnerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRunnerServiceHandler(svc RunnerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	runnerServiceMethods := v1.File_proto_v1_runner_proto.Services().ByName("RunnerService").Methods()
	runnerServiceStartWorkflowHandler := connect.NewUnaryHandler(
		RunnerServiceStartWorkflowProcedure,
		svc.StartWorkflow,
		connect.WithSchema(runnerServiceMethods.ByName("StartWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	runnerServiceStartJobHandler := connect.NewUnaryHandler(
		RunnerServiceStartJobProcedure,
		svc.StartJob,
		connect.WithSchema(runnerServiceMethods.ByName("StartJob")),
		connect.WithHandlerOptions(opts...),
	)
	runnerServiceStopJobHandler := connect.NewUnaryHandler(
		RunnerServiceStopJobProcedure,
		svc.StopJob,
		connect.WithSchema(runnerServiceMethods.ByName("StopJob")),
		connect.WithHandlerOptions(opts...),
	)
	runnerServiceJobStartedHandler := connect.NewUnaryHandler(
		RunnerServiceJobStartedProcedure,
		svc.JobStarted,
		connect.WithSchema(runnerServiceMethods.ByName("JobStarted")),
		connect.WithHandlerOptions(opts...),
	)
	runnerServiceGetLogStreamHandler := connect.NewUnaryHandler(
		RunnerServiceGetLogStreamProcedure,
		svc.GetLogStream,
		connect.WithSchema(runnerServiceMethods.ByName("GetLogStream")),
		connect.WithHandlerOptions(opts...),
	)
	runnerServiceCleanUpJobsHandler := connect.NewUnaryHandler(
		RunnerServiceCleanUpJobsProcedure,
		svc.CleanUpJobs,
		connect.WithSchema(runnerServiceMethods.ByName("CleanUpJobs")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.v1.RunnerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RunnerServiceStartWorkflowProcedure:
			runnerServiceStartWorkflowHandler.ServeHTTP(w, r)
		case RunnerServiceStartJobProcedure:
			runnerServiceStartJobHandler.ServeHTTP(w, r)
		case RunnerServiceStopJobProcedure:
			runnerServiceStopJobHandler.ServeHTTP(w, r)
		case RunnerServiceJobStartedProcedure:
			runnerServiceJobStartedHandler.ServeHTTP(w, r)
		case RunnerServiceGetLogStreamProcedure:
			runnerServiceGetLogStreamHandler.ServeHTTP(w, r)
		case RunnerServiceCleanUpJobsProcedure:
			runnerServiceCleanUpJobsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRunnerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRunnerServiceHandler struct{}

func (UnimplementedRunnerServiceHandler) StartWorkflow(context.Context, *connect.Request[v1.RunnerServiceStartWorkflowRequest]) (*connect.Response[v1.RunnerServiceStartWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.RunnerService.StartWorkflow is not implemented"))
}

func (UnimplementedRunnerServiceHandler) StartJob(context.Context, *connect.Request[v1.RunnerServiceStartJobRequest]) (*connect.Response[v1.RunnerServiceStartJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.RunnerService.StartJob is not implemented"))
}

func (UnimplementedRunnerServiceHandler) StopJob(context.Context, *connect.Request[v1.RunnerServiceStopJobRequest]) (*connect.Response[v1.RunnerServiceStopJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.RunnerService.StopJob is not implemented"))
}

func (UnimplementedRunnerServiceHandler) JobStarted(context.Context, *connect.Request[v1.RunnerServiceJobStartedRequest]) (*connect.Response[v1.RunnerServiceJobStartedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.RunnerService.JobStarted is not implemented"))
}

func (UnimplementedRunnerServiceHandler) GetLogStream(context.Context, *connect.Request[v1.RunnerServiceGetLogStreamRequest]) (*connect.Response[v1.RunnerServiceGetLogStreamResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.RunnerService.GetLogStream is not implemented"))
}

func (UnimplementedRunnerServiceHandler) CleanUpJobs(context.Context, *connect.Request[v1.RunnerServiceCleanUpJobsRequest]) (*connect.Response[v1.RunnerServiceCleanUpJobsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.RunnerService.CleanUpJobs is not implemented"))
}
