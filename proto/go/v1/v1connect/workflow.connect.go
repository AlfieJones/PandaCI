// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/v1/workflow.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "github.com/alfiejones/panda-ci/proto/go/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WorkflowServiceName is the fully-qualified name of the WorkflowService service.
	WorkflowServiceName = "proto.v1.WorkflowService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WorkflowServiceStartJobProcedure is the fully-qualified name of the WorkflowService's StartJob
	// RPC.
	WorkflowServiceStartJobProcedure = "/proto.v1.WorkflowService/StartJob"
	// WorkflowServiceStopJobProcedure is the fully-qualified name of the WorkflowService's StopJob RPC.
	WorkflowServiceStopJobProcedure = "/proto.v1.WorkflowService/StopJob"
	// WorkflowServiceStartTaskProcedure is the fully-qualified name of the WorkflowService's StartTask
	// RPC.
	WorkflowServiceStartTaskProcedure = "/proto.v1.WorkflowService/StartTask"
	// WorkflowServiceStopTaskProcedure is the fully-qualified name of the WorkflowService's StopTask
	// RPC.
	WorkflowServiceStopTaskProcedure = "/proto.v1.WorkflowService/StopTask"
	// WorkflowServiceStartStepProcedure is the fully-qualified name of the WorkflowService's StartStep
	// RPC.
	WorkflowServiceStartStepProcedure = "/proto.v1.WorkflowService/StartStep"
	// WorkflowServiceStopStepProcedure is the fully-qualified name of the WorkflowService's StopStep
	// RPC.
	WorkflowServiceStopStepProcedure = "/proto.v1.WorkflowService/StopStep"
	// WorkflowServiceCreateJobVolumeProcedure is the fully-qualified name of the WorkflowService's
	// CreateJobVolume RPC.
	WorkflowServiceCreateJobVolumeProcedure = "/proto.v1.WorkflowService/CreateJobVolume"
	// WorkflowServiceCreateWorkflowAlertProcedure is the fully-qualified name of the WorkflowService's
	// CreateWorkflowAlert RPC.
	WorkflowServiceCreateWorkflowAlertProcedure = "/proto.v1.WorkflowService/CreateWorkflowAlert"
	// WorkflowServicePingProcedure is the fully-qualified name of the WorkflowService's Ping RPC.
	WorkflowServicePingProcedure = "/proto.v1.WorkflowService/Ping"
)

// WorkflowServiceClient is a client for the proto.v1.WorkflowService service.
type WorkflowServiceClient interface {
	StartJob(context.Context, *connect.Request[v1.WorkflowServiceStartJobRequest]) (*connect.Response[v1.WorkflowServiceStartJobResponse], error)
	StopJob(context.Context, *connect.Request[v1.WorkflowServiceStopJobRequest]) (*connect.Response[v1.WorkflowServiceStopJobResponse], error)
	StartTask(context.Context, *connect.Request[v1.WorkflowServiceStartTaskRequest]) (*connect.Response[v1.WorkflowServiceStartTaskResponse], error)
	StopTask(context.Context, *connect.Request[v1.WorkflowServiceStopTaskRequest]) (*connect.Response[v1.WorkflowServiceStopTaskResponse], error)
	StartStep(context.Context, *connect.Request[v1.WorkflowServiceStartStepRequest]) (*connect.ServerStreamForClient[v1.WorkflowServiceStartStepResponse], error)
	StopStep(context.Context, *connect.Request[v1.WorkflowServiceStopStepRequest]) (*connect.Response[v1.WorkflowServiceStopStepResponse], error)
	CreateJobVolume(context.Context, *connect.Request[v1.WorkflowServiceCreateJobVolumeRequest]) (*connect.Response[v1.WorkflowServiceCreateJobVolumeResponse], error)
	CreateWorkflowAlert(context.Context, *connect.Request[v1.WorkflowServiceCreateWorkflowAlertRequest]) (*connect.Response[v1.WorkflowServiceCreateWorkflowAlertResponse], error)
	Ping(context.Context, *connect.Request[v1.WorkflowServicePingRequest]) (*connect.Response[v1.WorkflowServicePingResponse], error)
}

// NewWorkflowServiceClient constructs a client for the proto.v1.WorkflowService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorkflowServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WorkflowServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	workflowServiceMethods := v1.File_proto_v1_workflow_proto.Services().ByName("WorkflowService").Methods()
	return &workflowServiceClient{
		startJob: connect.NewClient[v1.WorkflowServiceStartJobRequest, v1.WorkflowServiceStartJobResponse](
			httpClient,
			baseURL+WorkflowServiceStartJobProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("StartJob")),
			connect.WithClientOptions(opts...),
		),
		stopJob: connect.NewClient[v1.WorkflowServiceStopJobRequest, v1.WorkflowServiceStopJobResponse](
			httpClient,
			baseURL+WorkflowServiceStopJobProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("StopJob")),
			connect.WithClientOptions(opts...),
		),
		startTask: connect.NewClient[v1.WorkflowServiceStartTaskRequest, v1.WorkflowServiceStartTaskResponse](
			httpClient,
			baseURL+WorkflowServiceStartTaskProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("StartTask")),
			connect.WithClientOptions(opts...),
		),
		stopTask: connect.NewClient[v1.WorkflowServiceStopTaskRequest, v1.WorkflowServiceStopTaskResponse](
			httpClient,
			baseURL+WorkflowServiceStopTaskProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("StopTask")),
			connect.WithClientOptions(opts...),
		),
		startStep: connect.NewClient[v1.WorkflowServiceStartStepRequest, v1.WorkflowServiceStartStepResponse](
			httpClient,
			baseURL+WorkflowServiceStartStepProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("StartStep")),
			connect.WithClientOptions(opts...),
		),
		stopStep: connect.NewClient[v1.WorkflowServiceStopStepRequest, v1.WorkflowServiceStopStepResponse](
			httpClient,
			baseURL+WorkflowServiceStopStepProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("StopStep")),
			connect.WithClientOptions(opts...),
		),
		createJobVolume: connect.NewClient[v1.WorkflowServiceCreateJobVolumeRequest, v1.WorkflowServiceCreateJobVolumeResponse](
			httpClient,
			baseURL+WorkflowServiceCreateJobVolumeProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("CreateJobVolume")),
			connect.WithClientOptions(opts...),
		),
		createWorkflowAlert: connect.NewClient[v1.WorkflowServiceCreateWorkflowAlertRequest, v1.WorkflowServiceCreateWorkflowAlertResponse](
			httpClient,
			baseURL+WorkflowServiceCreateWorkflowAlertProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("CreateWorkflowAlert")),
			connect.WithClientOptions(opts...),
		),
		ping: connect.NewClient[v1.WorkflowServicePingRequest, v1.WorkflowServicePingResponse](
			httpClient,
			baseURL+WorkflowServicePingProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("Ping")),
			connect.WithClientOptions(opts...),
		),
	}
}

// workflowServiceClient implements WorkflowServiceClient.
type workflowServiceClient struct {
	startJob            *connect.Client[v1.WorkflowServiceStartJobRequest, v1.WorkflowServiceStartJobResponse]
	stopJob             *connect.Client[v1.WorkflowServiceStopJobRequest, v1.WorkflowServiceStopJobResponse]
	startTask           *connect.Client[v1.WorkflowServiceStartTaskRequest, v1.WorkflowServiceStartTaskResponse]
	stopTask            *connect.Client[v1.WorkflowServiceStopTaskRequest, v1.WorkflowServiceStopTaskResponse]
	startStep           *connect.Client[v1.WorkflowServiceStartStepRequest, v1.WorkflowServiceStartStepResponse]
	stopStep            *connect.Client[v1.WorkflowServiceStopStepRequest, v1.WorkflowServiceStopStepResponse]
	createJobVolume     *connect.Client[v1.WorkflowServiceCreateJobVolumeRequest, v1.WorkflowServiceCreateJobVolumeResponse]
	createWorkflowAlert *connect.Client[v1.WorkflowServiceCreateWorkflowAlertRequest, v1.WorkflowServiceCreateWorkflowAlertResponse]
	ping                *connect.Client[v1.WorkflowServicePingRequest, v1.WorkflowServicePingResponse]
}

// StartJob calls proto.v1.WorkflowService.StartJob.
func (c *workflowServiceClient) StartJob(ctx context.Context, req *connect.Request[v1.WorkflowServiceStartJobRequest]) (*connect.Response[v1.WorkflowServiceStartJobResponse], error) {
	return c.startJob.CallUnary(ctx, req)
}

// StopJob calls proto.v1.WorkflowService.StopJob.
func (c *workflowServiceClient) StopJob(ctx context.Context, req *connect.Request[v1.WorkflowServiceStopJobRequest]) (*connect.Response[v1.WorkflowServiceStopJobResponse], error) {
	return c.stopJob.CallUnary(ctx, req)
}

// StartTask calls proto.v1.WorkflowService.StartTask.
func (c *workflowServiceClient) StartTask(ctx context.Context, req *connect.Request[v1.WorkflowServiceStartTaskRequest]) (*connect.Response[v1.WorkflowServiceStartTaskResponse], error) {
	return c.startTask.CallUnary(ctx, req)
}

// StopTask calls proto.v1.WorkflowService.StopTask.
func (c *workflowServiceClient) StopTask(ctx context.Context, req *connect.Request[v1.WorkflowServiceStopTaskRequest]) (*connect.Response[v1.WorkflowServiceStopTaskResponse], error) {
	return c.stopTask.CallUnary(ctx, req)
}

// StartStep calls proto.v1.WorkflowService.StartStep.
func (c *workflowServiceClient) StartStep(ctx context.Context, req *connect.Request[v1.WorkflowServiceStartStepRequest]) (*connect.ServerStreamForClient[v1.WorkflowServiceStartStepResponse], error) {
	return c.startStep.CallServerStream(ctx, req)
}

// StopStep calls proto.v1.WorkflowService.StopStep.
func (c *workflowServiceClient) StopStep(ctx context.Context, req *connect.Request[v1.WorkflowServiceStopStepRequest]) (*connect.Response[v1.WorkflowServiceStopStepResponse], error) {
	return c.stopStep.CallUnary(ctx, req)
}

// CreateJobVolume calls proto.v1.WorkflowService.CreateJobVolume.
func (c *workflowServiceClient) CreateJobVolume(ctx context.Context, req *connect.Request[v1.WorkflowServiceCreateJobVolumeRequest]) (*connect.Response[v1.WorkflowServiceCreateJobVolumeResponse], error) {
	return c.createJobVolume.CallUnary(ctx, req)
}

// CreateWorkflowAlert calls proto.v1.WorkflowService.CreateWorkflowAlert.
func (c *workflowServiceClient) CreateWorkflowAlert(ctx context.Context, req *connect.Request[v1.WorkflowServiceCreateWorkflowAlertRequest]) (*connect.Response[v1.WorkflowServiceCreateWorkflowAlertResponse], error) {
	return c.createWorkflowAlert.CallUnary(ctx, req)
}

// Ping calls proto.v1.WorkflowService.Ping.
func (c *workflowServiceClient) Ping(ctx context.Context, req *connect.Request[v1.WorkflowServicePingRequest]) (*connect.Response[v1.WorkflowServicePingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// WorkflowServiceHandler is an implementation of the proto.v1.WorkflowService service.
type WorkflowServiceHandler interface {
	StartJob(context.Context, *connect.Request[v1.WorkflowServiceStartJobRequest]) (*connect.Response[v1.WorkflowServiceStartJobResponse], error)
	StopJob(context.Context, *connect.Request[v1.WorkflowServiceStopJobRequest]) (*connect.Response[v1.WorkflowServiceStopJobResponse], error)
	StartTask(context.Context, *connect.Request[v1.WorkflowServiceStartTaskRequest]) (*connect.Response[v1.WorkflowServiceStartTaskResponse], error)
	StopTask(context.Context, *connect.Request[v1.WorkflowServiceStopTaskRequest]) (*connect.Response[v1.WorkflowServiceStopTaskResponse], error)
	StartStep(context.Context, *connect.Request[v1.WorkflowServiceStartStepRequest], *connect.ServerStream[v1.WorkflowServiceStartStepResponse]) error
	StopStep(context.Context, *connect.Request[v1.WorkflowServiceStopStepRequest]) (*connect.Response[v1.WorkflowServiceStopStepResponse], error)
	CreateJobVolume(context.Context, *connect.Request[v1.WorkflowServiceCreateJobVolumeRequest]) (*connect.Response[v1.WorkflowServiceCreateJobVolumeResponse], error)
	CreateWorkflowAlert(context.Context, *connect.Request[v1.WorkflowServiceCreateWorkflowAlertRequest]) (*connect.Response[v1.WorkflowServiceCreateWorkflowAlertResponse], error)
	Ping(context.Context, *connect.Request[v1.WorkflowServicePingRequest]) (*connect.Response[v1.WorkflowServicePingResponse], error)
}

// NewWorkflowServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorkflowServiceHandler(svc WorkflowServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	workflowServiceMethods := v1.File_proto_v1_workflow_proto.Services().ByName("WorkflowService").Methods()
	workflowServiceStartJobHandler := connect.NewUnaryHandler(
		WorkflowServiceStartJobProcedure,
		svc.StartJob,
		connect.WithSchema(workflowServiceMethods.ByName("StartJob")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceStopJobHandler := connect.NewUnaryHandler(
		WorkflowServiceStopJobProcedure,
		svc.StopJob,
		connect.WithSchema(workflowServiceMethods.ByName("StopJob")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceStartTaskHandler := connect.NewUnaryHandler(
		WorkflowServiceStartTaskProcedure,
		svc.StartTask,
		connect.WithSchema(workflowServiceMethods.ByName("StartTask")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceStopTaskHandler := connect.NewUnaryHandler(
		WorkflowServiceStopTaskProcedure,
		svc.StopTask,
		connect.WithSchema(workflowServiceMethods.ByName("StopTask")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceStartStepHandler := connect.NewServerStreamHandler(
		WorkflowServiceStartStepProcedure,
		svc.StartStep,
		connect.WithSchema(workflowServiceMethods.ByName("StartStep")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceStopStepHandler := connect.NewUnaryHandler(
		WorkflowServiceStopStepProcedure,
		svc.StopStep,
		connect.WithSchema(workflowServiceMethods.ByName("StopStep")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceCreateJobVolumeHandler := connect.NewUnaryHandler(
		WorkflowServiceCreateJobVolumeProcedure,
		svc.CreateJobVolume,
		connect.WithSchema(workflowServiceMethods.ByName("CreateJobVolume")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceCreateWorkflowAlertHandler := connect.NewUnaryHandler(
		WorkflowServiceCreateWorkflowAlertProcedure,
		svc.CreateWorkflowAlert,
		connect.WithSchema(workflowServiceMethods.ByName("CreateWorkflowAlert")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServicePingHandler := connect.NewUnaryHandler(
		WorkflowServicePingProcedure,
		svc.Ping,
		connect.WithSchema(workflowServiceMethods.ByName("Ping")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.v1.WorkflowService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WorkflowServiceStartJobProcedure:
			workflowServiceStartJobHandler.ServeHTTP(w, r)
		case WorkflowServiceStopJobProcedure:
			workflowServiceStopJobHandler.ServeHTTP(w, r)
		case WorkflowServiceStartTaskProcedure:
			workflowServiceStartTaskHandler.ServeHTTP(w, r)
		case WorkflowServiceStopTaskProcedure:
			workflowServiceStopTaskHandler.ServeHTTP(w, r)
		case WorkflowServiceStartStepProcedure:
			workflowServiceStartStepHandler.ServeHTTP(w, r)
		case WorkflowServiceStopStepProcedure:
			workflowServiceStopStepHandler.ServeHTTP(w, r)
		case WorkflowServiceCreateJobVolumeProcedure:
			workflowServiceCreateJobVolumeHandler.ServeHTTP(w, r)
		case WorkflowServiceCreateWorkflowAlertProcedure:
			workflowServiceCreateWorkflowAlertHandler.ServeHTTP(w, r)
		case WorkflowServicePingProcedure:
			workflowServicePingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWorkflowServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorkflowServiceHandler struct{}

func (UnimplementedWorkflowServiceHandler) StartJob(context.Context, *connect.Request[v1.WorkflowServiceStartJobRequest]) (*connect.Response[v1.WorkflowServiceStartJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.WorkflowService.StartJob is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) StopJob(context.Context, *connect.Request[v1.WorkflowServiceStopJobRequest]) (*connect.Response[v1.WorkflowServiceStopJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.WorkflowService.StopJob is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) StartTask(context.Context, *connect.Request[v1.WorkflowServiceStartTaskRequest]) (*connect.Response[v1.WorkflowServiceStartTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.WorkflowService.StartTask is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) StopTask(context.Context, *connect.Request[v1.WorkflowServiceStopTaskRequest]) (*connect.Response[v1.WorkflowServiceStopTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.WorkflowService.StopTask is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) StartStep(context.Context, *connect.Request[v1.WorkflowServiceStartStepRequest], *connect.ServerStream[v1.WorkflowServiceStartStepResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.WorkflowService.StartStep is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) StopStep(context.Context, *connect.Request[v1.WorkflowServiceStopStepRequest]) (*connect.Response[v1.WorkflowServiceStopStepResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.WorkflowService.StopStep is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) CreateJobVolume(context.Context, *connect.Request[v1.WorkflowServiceCreateJobVolumeRequest]) (*connect.Response[v1.WorkflowServiceCreateJobVolumeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.WorkflowService.CreateJobVolume is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) CreateWorkflowAlert(context.Context, *connect.Request[v1.WorkflowServiceCreateWorkflowAlertRequest]) (*connect.Response[v1.WorkflowServiceCreateWorkflowAlertResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.WorkflowService.CreateWorkflowAlert is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) Ping(context.Context, *connect.Request[v1.WorkflowServicePingRequest]) (*connect.Response[v1.WorkflowServicePingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.WorkflowService.Ping is not implemented"))
}
